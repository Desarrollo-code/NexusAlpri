 // prisma/schema.prisma



datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}


// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NotificationType {
  GENERAL
  ANNOUNCEMENT
  COURSE_UPDATE
  ACHIEVEMENT
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
  FIRST_NOTE
  FIRST_REACTION
  FIRST_RESOURCE_DOWNLOAD
  FIRST_COURSE_PUBLISHED
  TEN_COURSES_COMPLETED
  TWENTY_COURSES_COMPLETED
  HIGH_PERFORMER
  LEVEL_5_REACHED
  LEVEL_10_REACHED
  LEVEL_20_REACHED
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  PARAGRAPH
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  LONG_TEXT 
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum MotivationalMessageTriggerType {
  COURSE_COMPLETION
  COURSE_MID_PROGRESS
  COURSE_NEAR_COMPLETION
  LEVEL_UP
}

// --- MODELS ---

model User {
  id                    String              @id @default(cuid())
  name                  String
  email                 String              @unique
  password              String
  avatar                String?
  role                  UserRole            @default(STUDENT)
  registeredDate        DateTime?           @default(now())
  lastLogin             DateTime?
  isActive              Boolean             @default(true)
  theme                 String?
  isTwoFactorEnabled    Boolean             @default(false)
  twoFactorSecret       String?
  xp                    Int?                @default(0)
  enrollments           Enrollment[]
  courses               Course[]
  notifications         Notification[]
  courseProgress        CourseProgress[]
  announcements         Announcement[]
  announcementReads     AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  notes                 UserNote[]
  uploadedResources     EnterpriseResource[]
  sharedResources       EnterpriseResource[] @relation("SharedWithUsers")
  securityLogs          SecurityLog[]
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[]     @relation("EventAttendees")
  createdTemplates      LessonTemplate[]
  createdForms          Form[]
  formResponses         FormResponse[]
  quizAttempts          QuizAttempt[]
  achievements          UserAchievement[]
  sharedForms           Form[]              @relation("SharedForms") // <--- FIX 2: Added opposite relation
  motivationalMessages MotivationalMessage[]
  eventParticipations EventParticipation[]

  @@map("users")
}

model Course {
  id              String          @id @default(cuid())
  title           String
  description     String?         @db.Text
  imageUrl        String?
  category        String?
  instructor      User            @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  status          CourseStatus    @default(DRAFT)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  publicationDate DateTime?
  enrollments     Enrollment[]
  isMandatory     Boolean         @default(false)
  progress        CourseProgress[]
    // Relación para cursos con prerrequisitos
  prerequisite   Course?  @relation("CoursePrerequisites", fields: [prerequisiteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  prerequisiteId String?   @map("prerequisite_id")
  dependents     Course[] @relation("CoursePrerequisites")

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id                    String                 @id @default(cuid())
  title                 String
  order                 Int
  module                Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId              String
  contentBlocks         ContentBlock[]
  completionRecords     LessonCompletionRecord[]
  userNotes             UserNote[]
  templates             LessonTemplate[]       @relation("LessonTemplates") // <--- FIX 1a: Added relation name

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?

  @@map("content_blocks")
}

model Quiz {
  id               String          @id @default(cuid())
  title            String
  description      String?
  maxAttempts      Int?
  contentBlock     ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId   String          @unique
  questions        Question[]
  attempts         QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id              String          @id @default(cuid())
  text            String
  order           Int
  type            QuestionType    @default(SINGLE_CHOICE)
  quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  options         AnswerOption[]
  AnswerAttempt   AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id               String          @id @default(cuid())
  text             String
  isCorrect        Boolean         @default(false)
  feedback         String?
  points           Int             @default(0)
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  AnswerAttempt    AnswerAttempt[]

  @@map("answer_options")
}

model Enrollment {
  id           String          @id @default(cuid())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  enrolledAt   DateTime        @default(now())
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @default(now())
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id         String         @id @default(cuid())
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String
  type       String // "view", "quiz", "video"
  score      Float? // Score obtained in a quiz, if applicable
  completedAt DateTime      @default(now())

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model UserNote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model PlatformSettings {
  id                         String   @id @default("cl-nexus-settings-default")
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  require2faForAdmins        Boolean  @default(false)
  idleTimeoutMinutes         Int      @default(20)
  enableIdleTimeout          Boolean  @default(true)
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories         String   @default("General,Recursos Humanos")
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  fontHeadline               String?
  fontBody                   String?
  primaryColorDark           String?
  backgroundColorDark        String?
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  announcementsImageUrl      String?
  updatedAt                  DateTime @updatedAt

  @@map("platform_settings")
}

model SecurityLog {
  id           String   @id @default(cuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  event        String
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime @default(now())

  @@map("security_logs")
}

model Announcement {
  id              String                 @id @default(cuid())
  title           String
  content         String                 @db.Text
  date            DateTime               @default(now())
  author          User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  audience        String // 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR'
  priority        String                 @default("Normal")
  isPinned        Boolean                @default(false)
  attachments     AnnouncementAttachment[]
  reads           AnnouncementRead[]
  reactions       AnnouncementReaction[]
  notifications   Notification[]

  @@map("announcements")
}

model AnnouncementAttachment {
  id               String       @id @default(cuid())
  announcement     Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId   String
  name             String
  url              String
  type             String
  size             Float

  @@map("announcement_attachments")
}

model AnnouncementRead {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  announcement     Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId   String
  readAt           DateTime     @default(now())

  @@unique([userId, announcementId])
  @@map("announcement_reads")
}

model AnnouncementReaction {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  announcement     Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId   String
  reaction         String // emoji
  createdAt        DateTime     @default(now())

  @@unique([userId, announcementId])
  @@map("announcement_reactions")
}

model EnterpriseResource {
  id          String             @id @default(cuid())
  title       String
  description String?            @db.Text
  type        String // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, LINK, OTHER
  url         String?
  category    String?
  tags        String?
  status      ResourceStatus     @default(ACTIVE)
  pin         String?
  ispublic    Boolean            @default(true)
  uploadDate  DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  expiresAt   DateTime?
  uploader    User               @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId  String
  parentId    String?
  parent      EnterpriseResource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Restrict)
  children    EnterpriseResource[] @relation("FolderChildren")
  sharedWith  User[]             @relation("SharedWithUsers")

  @@map("enterprise_resources")
}


model Notification {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  title            String
  description      String?
  link             String?
  read             Boolean      @default(false)
  createdAt        DateTime     @default(now())
  announcement     Announcement? @relation(fields: [announcementId], references: [id], onDelete: SetNull)
  announcementId   String?
  interactiveEventId String?
  interactiveEventOccurrence DateTime?

  @@map("notifications")
}

model Achievement {
  id                 String            @id @default(cuid())
  slug               AchievementSlug   @unique
  name               String
  description        String
  icon               String?
  points             Int
  userAchievements   UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// --- CALENDAR MODELS ---
model CalendarEvent {
  id                  String          @id @default(cuid())
  title               String
  description         String?         @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean         @default(false)
  color               String          @default("blue")
  location            String?
  videoConferenceLink String?
  attachments         Json[]          @default([])
  creator             User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String
  audienceType        String // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  attendees           User[]          @relation("EventAttendees")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  recurrence          RecurrenceType  @default(NONE)
  recurrenceEndDate   DateTime?
  parentId            String?
  parent              CalendarEvent?  @relation("RecurringEvents", fields: [parentId], references: [id], onDelete: Cascade)
  occurrences         CalendarEvent[] @relation("RecurringEvents")
  isInteractive Boolean @default(false)
  participations EventParticipation[]
  
  @@map("calendar_events")
}

model EventParticipation {
    id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  event            CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String
  occurrenceDate   DateTime 
  
  confirmedAt      DateTime  @default(now())

  @@unique([userId, eventId, occurrenceDate])
  @@map("event_participations")
}


// --- FORMS MODELS ---
model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("SharedForms")

  @@map("forms")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json[]
  order       Int
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  answers     Answer[]

  @@map("form_fields")
}

model FormResponse {
  id          String       @id @default(cuid())
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  submittedAt DateTime     @default(now())
  answers     Answer[]
  score       Float?

  @@map("form_responses")
}

model Answer {
  id          String       @id @default(cuid())
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId  String
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId     String
  value       String       @db.Text

  @@map("answers")
}

model QuizAttempt {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  score           Float
  attemptNumber   Int
  submittedAt     DateTime        @default(now())
  answers         AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String

  @@map("answer_attempts")
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String // SYSTEM or USER
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId      String?
  templateBlocks TemplateBlock[]
  createdAt      DateTime        @default(now())
  
  lessons        Lesson[]        @relation("LessonTemplates") // <--- FIX 1b: Added opposite relation

  @@map("lesson_templates")
}

model TemplateBlock {
  id           String         @id @default(cuid())
  template     LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId   String
  type         LessonType
  order        Int

  @@map("template_blocks")
}

model MotivationalMessage {
  id          String                         @id @default(cuid())
  title       String
  content     String?
  imageUrl    String?
  videoUrl    String?
  triggerType MotivationalMessageTriggerType
  triggerId   String // e.g., courseId for COURSE_COMPLETION, level number for LEVEL_UP
  creatorId   String
  creator     User                           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime                       @default(now())
  updatedAt   DateTime                       @updatedAt

  @@unique([triggerType, triggerId])
}