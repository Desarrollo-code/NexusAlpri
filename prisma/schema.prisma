// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---

model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  avatar              String?
  role                UserRole @default(STUDENT)
  isActive            Boolean  @default(true)
  registeredDate      DateTime @default(now())
  lastLogin           DateTime?
  xp                  Int      @default(0)
  theme               String?
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?

  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  announcements       Announcement[]
  notifications       Notification[]
  securityLogs        SecurityLog[]
  notes               UserNote[]
  achievements        UserAchievement[]
  createdForms        Form[]                 @relation("FormCreator")
  formResponses       FormResponse[]
  createdEvents       CalendarEvent[]        @relation("EventCreator")
  attendedEvents      CalendarEvent[]        @relation("EventAttendees")
  uploadedResources   EnterpriseResource[]   @relation("ResourceUploader")
  sharedResources     EnterpriseResource[]   @relation("ResourceSharedWith")

  @@map("users")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publicationDate DateTime?

  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  lessonId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?

  @@map("content_blocks")
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id        String        @id @default(cuid())
  text      String
  type      QuestionType  @default(SINGLE_CHOICE)
  order     Int
  quizId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@map("questions")
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String?
  points     Int?
  questionId String

  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@map("answer_options")
}

model Enrollment {
  id         String         @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime       @default(now())
  progress   CourseProgress?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  updatedAt          DateTime                 @updatedAt

  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment       Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime @default(now())
  type        String   @default("view") // view, quiz, video
  score       Float?

  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model QuizAttempt {
  id            String        @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime      @default(now())

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id               String        @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  question         Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempt          QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("answer_attempts")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String?
  content     String
  date        DateTime @default(now())
  authorId    String
  audience    String   @default("ALL") // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT
  priority    String   @default("Normal")
  isPinned    Boolean  @default(false)

  author        User                       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  attachments   AnnouncementAttachment[]
  reads         AnnouncementRead[]
  reactions     AnnouncementReaction[]
  notifications Notification[]

  @@map("announcements")
}

model AnnouncementAttachment {
  id             String       @id @default(cuid())
  name           String
  url            String
  type           String
  size           Int
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@map("announcement_attachments")
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  userId         String
  announcementId String
  readAt         DateTime     @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@map("announcement_reads")
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  userId         String
  announcementId String
  reaction       String // emoji
  createdAt      DateTime     @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@map("announcement_reactions")
}

model Notification {
  id             String        @id @default(cuid())
  userId         String
  title          String
  description    String?
  link           String?
  read           Boolean       @default(false)
  createdAt      DateTime      @default(now())
  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EnterpriseResource {
  id           String         @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  ispublic     Boolean        @default(true)
  pin          String?
  uploadDate   DateTime       @default(now())
  status       ResourceStatus @default(ACTIVE)
  expiresAt    DateTime?
  uploaderId   String
  uploader     User           @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderHierarchy")
  sharedWith   User[]               @relation("ResourceSharedWith")

  @@map("enterprise_resources")
}


model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String   @default("blue")
  audienceType        String   @default("ALL") // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  attachments         Json[]
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@map("calendar_events")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  userId       String?
  emailAttempt String?
  createdAt    DateTime         @default(now())
  country      String?
  city         String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("security_logs")
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  resourceCategories          String    @default("General")
  primaryColor                String?
  secondaryColor              String?
  accentColor                 String?
  backgroundColorLight        String?
  fontHeadline                String?
  fontBody                    String?
  primaryColorDark            String?
  backgroundColorDark         String?
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  @@map("platform_settings")
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Achievement {
  id              String            @id @default(cuid())
  slug            AchievementSlug   @unique
  name            String
  description     String
  icon            String
  points          Int
  unlockedBy      UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           String         @default("USER") // SYSTEM or USER
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      FormStatus @default(DRAFT)
  isQuiz      Boolean  @default(false)
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator     User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]

  @@map("forms")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  options     Json? // Para 'SINGLE_CHOICE' o 'MULTIPLE_CHOICE'
  placeholder String?
  order       Int
  formId      String
  
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@map("form_fields")
}

model FormResponse {
  id           String   @id @default(cuid())
  formId       String
  userId       String
  submittedAt  DateTime @default(now())
  score        Float?   // Puntuación si es un quiz
  
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      FormResponseAnswer[]

  @@map("form_responses")
}

model FormResponseAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text
  
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("form_response_answers")
}
