// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
  DOCUMENTO_EDITABLE
}

enum ResourceStatus {
    ACTIVE
    ARCHIVED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
  COURSE_CREATED
  COURSE_UPDATED
  COURSE_DELETED
  USER_SUSPENDED
}

enum RecurrenceType {
    NONE
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
  FIRST_NOTE
  FIRST_REACTION
  FIRST_RESOURCE_DOWNLOAD
  FIRST_COURSE_PUBLISHED
  TEN_COURSES_COMPLETED
  TWENTY_COURSES_COMPLETED
  HIGH_PERFORMER
  LEVEL_5_REACHED
  LEVEL_10_REACHED
  LEVEL_20_REACHED
}

enum MotivationalMessageTriggerType {
  COURSE_ENROLLMENT
  COURSE_MID_PROGRESS
  COURSE_NEAR_COMPLETION
  COURSE_COMPLETION
  LEVEL_UP
}

// --- MODELS ---

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  role                UserRole             @default(STUDENT)
  avatar              String?
  registeredDate      DateTime             @default(now())
  lastLogin           DateTime?
  isActive            Boolean              @default(true)
  theme               String?              @default("light")
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  xp                  Int?                 @default(0)

  // Relations
  courses             Course[]             @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  announcements       Announcement[]
  announcementReads   AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  uploadedResources   EnterpriseResource[]
  sharedResources     EnterpriseResource[] @relation("SharedWithUsers")
  notes               UserNote[]
  createdForms        Form[]
  formResponses       FormResponse[]
  quizAttempts        QuizAttempt[]
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]      @relation("EventAttendees")
  courseAssignments   CourseAssignment[]
  createdTemplates    LessonTemplate[]
  eventParticipations EventParticipation[]
  authoredVersions    ResourceVersion[]
  achievements        UserAchievement[]

  processId           String?
  process             Process?             @relation(fields: [processId], references: [id])

  @@index([email])
}

model Process {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    parentId  String?
    parent    Process?  @relation("ProcessHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children  Process[] @relation("ProcessHierarchy")
    
    users     User[]
}

model Course {
  id                  String         @id @default(cuid())
  title               String
  description         String         @db.Text
  category            String
  status              CourseStatus   @default(DRAFT)
  imageUrl            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  publicationDate     DateTime?
  isMandatory         Boolean        @default(false)

  // Relations
  instructorId        String
  instructor          User           @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules             Module[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  assignments         CourseAssignment[]

  prerequisiteId      String?         @unique
  prerequisite        Course?         @relation("CoursePrerequisite", fields: [prerequisiteId], references: [id], onDelete: SetNull)
  prerequisiteFor     Course?         @relation("CoursePrerequisite")
  
  certificateTemplateId String?
  certificateTemplate CertificateTemplate? @relation(fields: [certificateTemplateId], references: [id])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completedBy   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String      @unique
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    String // 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  
  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int      @default(0)
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId            String
  course              Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progressPercentage  Int      @default(0)
  completedAt         DateTime?
  lastActivity        DateTime? @updatedAt
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId        String     @unique
  
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id           String @id @default(cuid())
    progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    progressId   String
    lesson       Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId     String
    completedAt  DateTime @default(now())
    type         String // 'view', 'quiz', 'video'
    score        Float?

    @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId        String
    quiz          Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())
    answers       AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id             String       @id @default(cuid())
    quizAttemptId  String
    quizAttempt    QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    questionId     String
    question       Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
    selectedOptionId String
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)

    @@index([quizAttemptId])
}

model EnterpriseResource {
    id              String    @id @default(cuid())
    title           String
    description     String?
    type            ResourceType
    url             String?
    content         String?    @db.Text
    version         Int        @default(1)
    observations    String?    @db.Text
    tags            String?
    ispublic        Boolean   @default(true)
    pin             String?
    category        String?
    status          ResourceStatus @default(ACTIVE)
    uploadDate      DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    expiresAt       DateTime?

    uploaderId      String
    uploader        User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

    parentId        String?
    parent          EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
    children        EnterpriseResource[] @relation("FolderHierarchy")
    
    sharedWith      User[] @relation("SharedWithUsers")

    versions        ResourceVersion[]

    @@index([parentId])
}

model ResourceVersion {
  id          String   @id @default(cuid())
  resourceId  String
  resource    EnterpriseResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  version     Int
  content     String?  @db.Text
  createdAt   DateTime @default(now())
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  date        DateTime @default(now())
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience    String   // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT'
  priority    String   @default("Normal")
  isPinned    Boolean  @default(false)
  
  attachments AnnouncementAttachment[]
  reads       AnnouncementRead[]
  reactions   AnnouncementReaction[]
  notifications Notification[]
}

model AnnouncementAttachment {
  id              String      @id @default(cuid())
  name            String
  url             String
  type            String
  size            Int
  announcementId  String
  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model AnnouncementRead {
    id              String @id @default(cuid())
    userId          String
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    announcementId  String
    announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    readAt          DateTime @default(now())

    @@unique([userId, announcementId])
}

model AnnouncementReaction {
    id              String @id @default(cuid())
    userId          String
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    announcementId  String
    announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    reaction        String

    @@unique([userId, announcementId])
}

model Form {
    id          String   @id @default(cuid())
    title       String
    description String?
    creatorId   String
    creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    status      FormStatus @default(DRAFT)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    isQuiz      Boolean  @default(false)

    fields      FormField[]
    responses   FormResponse[]
    sharedWith  User[]
    gameSessions GameSession[]

    @@index([creatorId])
}

model FormField {
    id          String      @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json? // [{ "id": "...", "text": "...", "isCorrect": true, "points": 10 }]
    required    Boolean     @default(false)
    placeholder String?
    order       Int
    formId      String
    form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    
    answers     AnswerAttempt[]

    @@index([formId])
}

model FormResponse {
    id          String   @id @default(cuid())
    formId      String
    form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt DateTime @default(now())
    score       Float?
    
    answers     Answer[]

    @@index([formId])
    @@index([userId])
}

model Answer {
    id         String       @id @default(cuid())
    responseId String
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId    String
    // No hay relation a FormField aquí para permitir eliminar campos de un form sin borrar respuestas
    value      String       @db.Text
}

model SecurityLog {
    id          String      @id @default(cuid())
    event       SecurityLogEvent
    ipAddress   String?
    userId      String?
    emailAttempt String?
    details     String?
    createdAt   DateTime    @default(now())
    userAgent   String?
    country     String?
    city        String?
    
    user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([event])
}

model CalendarEvent {
    id        String   @id @default(cuid())
    title     String
    description String?
    location    String?
    start     DateTime
    end       DateTime
    allDay    Boolean  @default(false)
    audienceType String // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
    color     String   @default("blue")
    creatorId String
    creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    attendees User[]   @relation("EventAttendees")
    videoConferenceLink String?
    attachments Json[]
    recurrence RecurrenceType @default(NONE)
    recurrenceEndDate DateTime?
    isInteractive Boolean @default(false)

    participations EventParticipation[]
    notifications  Notification[]
}

model EventParticipation {
    id              String @id @default(cuid())
    userId          String
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    eventId         String
    event           CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
    occurrenceDate  DateTime
    
    @@unique([userId, eventId, occurrenceDate])
}

model Notification {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    title       String
    description String?
    link        String?
    read        Boolean  @default(false)
    createdAt   DateTime @default(now())
    
    isMotivational      Boolean @default(false)
    motivationalMessageId String?
    motivationalMessage MotivationalMessage? @relation(fields: [motivationalMessageId], references: [id], onDelete: SetNull)

    interactiveEventId          String?
    interactiveEventOccurrence  DateTime?
    interactiveEvent            CalendarEvent? @relation(fields: [interactiveEventId], references: [id], onDelete: SetNull)
    
    announcementId      String?
    announcement        Announcement? @relation(fields: [announcementId], references: [id], onDelete: SetNull)
    
    @@index([userId])
}

model Achievement {
    id          String    @id @default(cuid())
    slug        AchievementSlug @unique
    name        String
    description String
    points      Int
    icon        String?
    unlockedBy  UserAchievement[]
}

model UserAchievement {
    id            String     @id @default(cuid())
    userId        String
    user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId String
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    unlockedAt    DateTime   @default(now())

    @@unique([userId, achievementId])
}

model CourseAssignment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignedAt  DateTime @default(now())
  assignedById String

  @@unique([userId, courseId])
}

model LessonTemplate {
  id              String         @id @default(cuid())
  name            String         @unique
  description     String?
  type            String         // SYSTEM, USER
  creatorId       String?
  creator         User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt       DateTime       @default(now())
  
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model CertificateTemplate {
  id                  String  @id @default(cuid())
  name                String  @unique
  backgroundImageUrl  String
  textColor           String? @default("#000000")
  fontFamilyHeadline  String? @default("Space Grotesk")
  fontFamilyBody      String? @default("Inter")
  
  studentNamePosition Json? // { x: 50, y: 45, fontSize: 48, fontWeight: 'bold' }
  courseNamePosition  Json?
  datePosition        Json?
  scorePosition       Json? // Posición opcional para la calificación

  courses             Course[]
  createdAt           DateTime @default(now())
}

model GameSession {
  id        String   @id @default(cuid())
  pin       String   @unique
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  hostId    String
  status    String   // LOBBY, IN_PROGRESS, FINISHED
  createdAt DateTime @default(now())
  
  players   Player[]
}

model Player {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameSessionId String
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  nickname      String
  score         Int      @default(0)
  joinedAt      DateTime @default(now())
  
  responses     PlayerResponse[]

  @@unique([userId, gameSessionId])
}

model PlayerResponse {
  id              String   @id @default(cuid())
  playerId        String
  player          Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  questionId      String
  optionId        String
  isCorrect       Boolean
  scoreAwarded    Int
  responseTimeMs  Int
  createdAt       DateTime @default(now())
}

model MotivationalMessage {
    id          String @id @default(cuid())
    title       String
    content     String?
    imageUrl    String?
    videoUrl    String?
    triggerType MotivationalMessageTriggerType
    triggerId   String // Can be a courseId or a level identifier like 'level-5'
    creatorId   String
    creator     User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    
    notifications Notification[]
}
