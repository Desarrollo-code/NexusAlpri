// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  password            String
  role                UserRole              @default(STUDENT)
  avatar              String?
  xp                  Int?                  @default(0)
  isActive            Boolean               @default(true)
  registeredDate      DateTime?             @default(now())
  twoFactorSecret     String?
  isTwoFactorEnabled  Boolean               @default(false)
  courses             Course[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  announcements       Announcement[]
  announcementReads   AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  notes               UserNote[]
  securityLogs        SecurityLog[]
  resourcesUploaded   EnterpriseResource[]
  sharedResources     EnterpriseResource[]  @relation("SharedWithUsers")
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]       @relation("EventAttendees")
  createdForms        Form[]
  formResponses       FormResponse[]
  userAchievements    UserAchievement[]
  createdTemplates    LessonTemplate[]
  createdMotivationalMessages MotivationalMessage[]

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id           String                  @id @default(cuid())
  title        String
  order        Int
  moduleId     String
  module       Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy  LessonCompletionRecord[]
  userNotes    UserNote[]
  templates    LessonTemplate[]        @relation("LessonToTemplate")

  @@index([moduleId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  type     QuestionType
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean         @default(false)
  feedback    String?
  points      Int             @default(0)
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @default(now())
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime       @default(now())
  type        String         @default("view")
  score       Float?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id             String       @id @default(cuid())
  attemptId      String
  attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId     String
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lessonId])
}

model Announcement {
  id          String                 @id @default(cuid())
  title       String
  content     String
  date        DateTime               @default(now())
  authorId    String
  author      User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience    String // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT'
  priority    String                 @default("Normal")
  isPinned    Boolean                @default(false)
  attachments AnnouncementAttachment[]
  reads       AnnouncementRead[]
  reactions   AnnouncementReaction[]
  notifications Notification[]
}

model AnnouncementAttachment {
  id             String       @id @default(cuid())
  name           String
  url            String
  type           String
  size           Int
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  readAt         DateTime     @default(now())

  @@unique([userId, announcementId])
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  reaction       String // emoji
  createdAt      DateTime     @default(now())

  @@unique([userId, announcementId])
}

model Notification {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  link           String?
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum EnterpriseResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}


model EnterpriseResource {
  id           String                 @id @default(cuid())
  title        String
  description  String?
  type         EnterpriseResourceType
  url          String?
  category     String?
  tags         String?
  status       ResourceStatus         @default(ACTIVE)
  ispublic     Boolean                @default(true)
  pin          String?
  uploadDate   DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  expiresAt    DateTime?
  uploaderId   String
  uploader     User                   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId     String?
  parent       EnterpriseResource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[]   @relation("FolderChildren")
  sharedWith   User[]                 @relation("SharedWithUsers")

  @@index([uploaderId])
  @@index([parentId])
}


enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model CalendarEvent {
  id                  String         @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean        @default(false)
  location            String?
  videoConferenceLink String?
  audienceType        String // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  color               String         @default("blue")
  creatorId           String
  creator             User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]         @relation("EventAttendees")
  attachments         Json?
  recurrence          RecurrenceType @default(NONE)
  recurrenceEndDate   DateTime?
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model SecurityLog {
  id           String           @id @default(cuid())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime         @default(now())

  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  announcementsImageUrl       String?
  allowPublicRegistration     Boolean   @default(true)
  emailWhitelist              String?
  enableEmailNotifications    Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  primaryColor                String?
  secondaryColor              String?
  accentColor                 String?
  backgroundColorLight        String?
  primaryColorDark            String?
  backgroundColorDark         String?
  fontHeadline                String?
  fontBody                    String?
  resourceCategories          String?   @default("General,Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones")
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  options     Json? // [{ id: "...", text: "...", isCorrect: false, points: 10 }]
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String       @id @default(cuid())
  formId      String
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime     @default(now())
  answers     FormAnswer[]
  score       Float? // For quizzes
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
  FIRST_NOTE
  FIRST_REACTION
  FIRST_RESOURCE_DOWNLOAD
  FIRST_COURSE_PUBLISHED
  TEN_COURSES_COMPLETED
  TWENTY_COURSES_COMPLETED
  HIGH_PERFORMER
  LEVEL_5_REACHED
  LEVEL_10_REACHED
  LEVEL_20_REACHED
}

model Achievement {
  id        String            @id @default(cuid())
  slug      AchievementSlug   @unique
  name      String
  description String
  points    Int
  icon      String?
  users     UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

enum TemplateType {
  SYSTEM
  USER
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType   @default(USER)
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]       @relation("LessonToTemplate")
}

model TemplateBlock {
  id         String     @id @default(cuid())
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       LessonType
  order      Int
}

enum MotivationalMessageTriggerType {
  COURSE_COMPLETION
  LEVEL_UP
}

model MotivationalMessage {
  id          String                         @id @default(cuid())
  title       String
  content     String?
  imageUrl    String?
  videoUrl    String?
  triggerType MotivationalMessageTriggerType
  triggerId   String // e.g., courseId for COURSE_COMPLETION, level number for LEVEL_UP
  creatorId   String
  creator     User                           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime                       @default(now())
  updatedAt   DateTime                       @updatedAt

  @@unique([triggerType, triggerId])
}