
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// -------------------
// ENUMS
// -------------------

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
  TEN_COURSES_COMPLETED
  TWENTY_COURSES_COMPLETED
  HIGH_PERFORMER
  LEVEL_5_REACHED
  LEVEL_10_REACHED
  LEVEL_20_REACHED
  FIRST_NOTE
  FIRST_REACTION
  FIRST_RESOURCE_DOWNLOAD
  FIRST_COURSE_PUBLISHED
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

// -------------------
// MODELS
// -------------------

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  role                UserRole             @default(STUDENT)
  avatar              String?
  xp                  Int?                 @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  registeredDate      DateTime?            @default(now())
  theme               String?
  isActive            Boolean              @default(true)
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  courses             Course[]             @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  announcements       Announcement[]       @relation("AuthoredAnnouncements")
  readAnnouncements   AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  securityLogs        SecurityLog[]
  userNotes           UserNote[]
  uploadedResources   EnterpriseResource[] @relation("UploadedBy")
  sharedResources     EnterpriseResource[] @relation("SharedWith")
  authoredTemplates   LessonTemplate[]     @relation("AuthoredTemplates")
  quizAttempts        QuizAttempt[]
  formResponses       FormResponse[]
  createdForms        Form[]               @relation("CreatedForms")
  sharedForms         Form[]               @relation("SharedForms")
  createdEvents       CalendarEvent[]      @relation("CreatedEvents")
  attendedEvents      CalendarEvent[]      @relation("EventAttendees")
  achievements        UserAchievement[]

  @@index([email])
}

model Course {
  id               String           @id @default(cuid())
  title            String
  description      String?          @db.Text
  imageUrl         String?
  category         String?          @default("General")
  status           CourseStatus     @default(DRAFT)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  publicationDate  DateTime?
  instructor       User             @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId     String
  modules          Module[]
  enrollments      Enrollment[]
  courseProgress   CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id               String                 @id @default(cuid())
  title            String
  order            Int
  module           Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId         String
  contentBlocks    ContentBlock[]
  completionRecords LessonCompletionRecord[]
  notes            UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String         @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  type    QuestionType   @default(SINGLE_CHOICE)
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId  String
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id            String          @id @default(cuid())
  text          String
  isCorrect     Boolean         @default(false)
  feedback      String?         @db.Text
  points        Int             @default(0)
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  course              Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId            String
  progressPercentage  Float                    @default(0)
  completedAt         DateTime?
  lastActivity        DateTime?                @default(now())
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId        String                   @unique
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id          String          @id @default(cuid())
  progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId  String
  lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  completedAt DateTime        @default(now())
  type        String          @default("view") // e.g., 'view', 'quiz', 'video'
  score       Float?

  @@unique([progressId, lessonId])
  @@index([lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id              String       @id @default(cuid())
  attempt         QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId       String
  question        Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String
}

model PlatformSettings {
  id                        String   @id @default("cl-nexus-settings-default")
  platformName              String   @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String   @default("Space Grotesk")
  fontBody                  String   @default("Inter")
  primaryColor              String?  @default("#6366f1")
  secondaryColor            String?  @default("#a5b4fc")
  accentColor               String?  @default("#ec4899")
  backgroundColorLight      String?  @default("#f8fafc")
  primaryColorDark          String?  @default("#a5b4fc")
  backgroundColorDark       String?  @default("#020617")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @default("")
  require2faForAdmins       Boolean  @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  updatedAt                 DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?          @db.Text
  emailAttempt String?
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?

  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

model EnterpriseResource {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  ispublic     Boolean        @default(true)
  pin          String?
  status       ResourceStatus @default(ACTIVE)
  expiresAt    DateTime?
  uploadDate   DateTime       @default(now())
  uploader     User           @relation("UploadedBy", fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId   String
  parent       EnterpriseResource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String?
  children     EnterpriseResource[] @relation("FolderHierarchy")
  sharedWith   User[]         @relation("SharedWith")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id          String                 @id @default(cuid())
  title       String
  content     String                 @db.Text
  date        DateTime               @default(now())
  author      User                   @relation("AuthoredAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  audience    String                 @default("ALL") // Can be 'ALL', or a UserRole
  priority    String                 @default("Normal") // e.g., Normal, Urgente
  isPinned    Boolean                @default(false)
  attachments AnnouncementAttachment[]
  reads       AnnouncementRead[]
  reactions   AnnouncementReaction[]
  notifications Notification[]

  @@index([authorId])
}

model AnnouncementAttachment {
  id             String       @id @default(cuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  name           String
  url            String
  type           String
  size           Float
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  readAt         DateTime     @default(now())

  @@unique([userId, announcementId])
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  reaction       String

  @@unique([userId, announcementId])
}

model Notification {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  link           String?
  read           Boolean       @default(false)
  createdAt      DateTime      @default(now())
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String?

  @@index([userId])
}

model UserNote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String?
  points       Int               @default(0)
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

model LessonTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  type           String // 'SYSTEM' or 'USER'
  creatorId      String?
  creator        User?            @relation("AuthoredTemplates", fields: [creatorId], references: [id])
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
  type       LessonType
  order      Int
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  sharedWith   User[]         @relation("SharedForms")
  fields       FormField[]
  responses    FormResponse[]

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // [{ id, text, isCorrect, points }]
  order       Int
  answers     FormResponseAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String               @id @default(cuid())
  formId      String
  form        Form                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime             @default(now())
  score       Float?
  answers     FormResponseAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormResponseAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String       @db.Text
}

model CalendarEvent {
  id                String         @id @default(cuid())
  title             String
  description       String?        @db.Text
  location          String?
  start             DateTime
  end               DateTime
  allDay            Boolean        @default(false)
  color             String         @default("blue")
  videoConferenceLink String?
  attachments       Json[]         @default("[]")
  creator           User           @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId         String
  audienceType      String         @default("ALL")
  attendees         User[]         @relation("EventAttendees")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  recurrence        RecurrenceType @default(NONE)
  recurrenceEndDate DateTime?
  parentId          String?
  parent            CalendarEvent? @relation("RecurringEvent", fields: [parentId], references: [id], onDelete: Cascade)
  occurrences       CalendarEvent[] @relation("RecurringEvent")

  @@index([creatorId])
}
