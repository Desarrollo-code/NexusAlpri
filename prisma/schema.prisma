// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}


// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                      String              @id @default(cuid())
  name                    String
  email                   String              @unique
  password                String
  avatar                  String?
  role                    UserRole            @default(STUDENT)
  isActive                Boolean             @default(true)
  isTwoFactorEnabled      Boolean             @default(false)
  twoFactorSecret         String?
  registeredDate          DateTime            @default(now())
  lastLogin               DateTime?
  theme                   String?
  xp                      Int                 @default(0)
  level                   Int                 @default(1)

  // Relations
  taughtCourses           Course[]            @relation("TaughtBy")
  enrollments             Enrollment[]
  courseProgress          CourseProgress[]
  userNotes               UserNote[]
  createdAnnouncements    Announcement[]
  announcementReads       AnnouncementRead[]
  announcementReactions   AnnouncementReaction[]
  uploadedResources       EnterpriseResource[] @relation("UploadedBy")
  notifications           Notification[]
  formResponses           FormResponse[]
  createdForms            Form[]               @relation("CreatedBy")
  createdEvents           CalendarEvent[]      @relation("CreatedBy")
  attendedEvents          CalendarEvent[]      @relation("Attendees")
  userAchievements        UserAchievement[]
  sharedResources         EnterpriseResource[] @relation("SharedResources")
  securityLogs            SecurityLog[]
  quizAttempts            QuizAttempt[]        // Corregido: Agregado el campo inverso
  formsSharedWithMe       Form[]               @relation("FormSharedWith") // Corregido: Agregado el campo inverso
  createdLessonTemplates  LessonTemplate[]     // Corregido: Agregado el campo inverso

  @@map("users")
}

model Course {
  id                String            @id @default(cuid())
  title             String
  description       String
  category          String?
  imageUrl          String?
  status            CourseStatus      @default(DRAFT)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  publicationDate   DateTime?

  // Relations
  instructor        User              @relation("TaughtBy", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId      String
  modules           Module[]
  enrollments       Enrollment[]
  courseProgress    CourseProgress[]  @relation("CourseProgress") // Corregido: Agregado el campo inverso

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id                   String                   @id @default(cuid())
  title                String
  order                Int
  module               Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId             String
  contentBlocks        ContentBlock[]
  completionRecords    LessonCompletionRecord[]
  userNotes            UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id               String          @id @default(cuid())
  type             LessonType
  content          String?         @db.Text
  order            Int
  lesson           Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId         String
  quiz             Quiz?

  @@map("content_blocks")
}

model Quiz {
  id               String          @id @default(cuid())
  title            String
  description      String?
  contentBlock     ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId   String          @unique
  questions        Question[]
  attempts         QuizAttempt[]
  maxAttempts      Int?

  @@map("quizzes")
}

model Question {
  id             String         @id @default(cuid())
  text           String
  order          Int
  quiz           Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId         String
  type           QuestionType   @default(SINGLE_CHOICE)
  options        AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id             String          @id @default(cuid())
  text           String
  isCorrect      Boolean
  feedback       String?
  points         Int             @default(0)
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  answerAttempts AnswerAttempt[]

  @@map("answer_options")
}

model Enrollment {
  id           String          @id @default(cuid())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  enrolledAt   DateTime        @default(now())
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId   String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId     String
  completedAt  DateTime       @default(now())
  type         String // "view", "quiz", "video"
  score        Float? // For quizzes

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model QuizAttempt {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  attemptNumber   Int
  score           Float
  submittedAt     DateTime        @default(now())
  answers         AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id                 String         @id @default(cuid())
  attempt            QuizAttempt    @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId          String
  question           Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId         String
  selectedOption     AnswerOption   @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId   String

  @@map("answer_attempts")
}

model UserNote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model EnterpriseResource {
  id              String              @id @default(cuid())
  title           String
  description     String?             @db.Text
  type            ResourceType
  url             String?
  tags            String?
  category        String?
  uploaderId      String
  uploader        User                @relation("UploadedBy", fields: [uploaderId], references: [id], onDelete: Cascade)
  uploadDate      DateTime            @default(now())
  parentId        String?
  parent          EnterpriseResource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        EnterpriseResource[] @relation("FolderHierarchy")
  ispublic        Boolean             @default(true)
  pin             String?
  expiresAt       DateTime?
  status          ResourceStatus      @default(ACTIVE)

  sharedWith User[] @relation("SharedResources")
}

model Announcement {
  id            String                 @id @default(cuid())
  title         String
  content       String                 @db.Text
  date          DateTime               @default(now())
  authorId      String
  author        User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience      String                 // Can be a UserRole or "ALL"
  priority      String                 @default("Normal")
  isPinned      Boolean                @default(false)

  attachments   AnnouncementAttachment[]
  reads         AnnouncementRead[]
  reactions     AnnouncementReaction[]
  notifications Notification[]

  @@map("announcements")
}

model AnnouncementAttachment {
  id             String        @id @default(cuid())
  name           String
  url            String
  type           String
  size           Int
  announcement   Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String

  @@map("announcement_attachments")
}


model AnnouncementRead {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  readAt         DateTime     @default(now())

  @@unique([userId, announcementId])
  @@map("announcement_reads")
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  reaction       String       // Emoji
  reactedAt      DateTime     @default(now())

  @@unique([userId, announcementId])
  @@map("announcement_reactions")
}

model CalendarEvent {
  id                    String   @id @default(cuid())
  title                 String
  description           String?
  start                 DateTime
  end                   DateTime
  allDay                Boolean  @default(false)
  color                 String?  @default("blue")
  location              String?
  videoConferenceLink   String?

  creatorId             String
  creator               User     @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)

  audienceType          String   // e.g., 'ALL', 'ADMINISTRATOR', 'SPECIFIC'
  attendees             User[]   @relation("Attendees")
  attachments           Json[]   @default([])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("calendar_events")
}

model Form {
  id            String         @id @default(cuid())
  title         String
  description   String?
  status        FormStatus     @default(DRAFT)
  isQuiz        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  creator       User           @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]         @relation("FormSharedWith")

  @@map("forms")
}

model FormField {
  id            String        @id @default(cuid())
  label         String
  type          FormFieldType
  required      Boolean       @default(false)
  placeholder   String?
  options       Json?         // Para campos como 'select', 'radio', 'checkbox'
  order         Int
  formId        String
  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@map("form_fields")
}

model FormResponse {
  id            String       @id @default(cuid())
  formId        String
  form          Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt   DateTime     @default(now())
  answers       FormAnswer[]
  score         Float?       // Puntuación si es un quiz

  @@map("form_responses")
}

model FormAnswer {
  id           String       @id @default(cuid())
  responseId   String
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId      String
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value        String       @db.Text

  @@map("form_answers")
}

model Notification {
  id             String          @id @default(cuid())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  title          String
  description    String?
  link           String?
  read           Boolean         @default(false)
  createdAt      DateTime        @default(now())

  // Relación opcional con un anuncio
  announcement   Announcement?   @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String?

  @@map("notifications")
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String   // SUCCESSFUL_LOGIN, FAILED_LOGIN_ATTEMPT, etc.
  userId       String?
  emailAttempt String?  // For failed attempts on non-existent users
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  details      String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  country      String?
  city         String?

  @@map("security_logs")
}

model Achievement {
  id          String            @id @default(cuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String
  points      Int
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            String // SYSTEM or USER
  creatorId       String?
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  createdAt       DateTime        @default(now())

  @@map("lesson_templates")
}

model TemplateBlock {
  id           String         @id @default(cuid())
  template     LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId   String
  type         LessonType
  order        Int

  @@map("template_blocks")
}


model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  emailWhitelist             String?   // Comma-separated list of allowed domains
  resourceCategories         String?   // Comma-separated list

  // Password Policy
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)

  // Security
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)

  // Appearance
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  primaryColorDark           String?
  backgroundColorDark        String?
  fontHeadline               String?
  fontBody                   String?
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?

  updatedAt                  DateTime  @updatedAt

  @@map("platform_settings")
}