// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- USER & AUTH ---
model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  name                  String
  password              String
  role                  UserRole              @default(STUDENT)
  avatar                String?
  theme                 String?
  isActive              Boolean               @default(true)
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime              @default(now())
  xp                    Int                   @default(0)

  // Relations
  taughtCourses         Course[]              @relation("InstructorCourses")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  announcements         Announcement[]
  announcementReads     AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[]       @relation("EventAttendees")
  userNotes             UserNote[]
  uploadedResources     EnterpriseResource[]
  sharedResources       EnterpriseResource[]  @relation("SharedWithUsers")
  createdForms          Form[]
  formResponses         FormResponse[]
  quizAttempts          QuizAttempt[]
  createdTemplates      LessonTemplate[]
  achievements          UserAchievement[]
  notifications         Notification[]
  createdMessages       Message[]             @relation("MessageAuthor")
  conversations         Conversation[]
  
  processId             String?
  process               Process?              @relation(fields: [processId], references: [id], onDelete: SetNull)

  assignedCourses       CourseAssignment[]
  createdResourceVersions ResourceVersion[]
  eventParticipations   EventParticipation[]  
  createdMotivationalMessages MotivationalMessage[]

  @@map("users")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE & CONTENT ---
model Course {
  id                    String                @id @default(cuid())
  title                 String
  description           String
  imageUrl              String?
  category              String
  status                CourseStatus          @default(DRAFT)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  publicationDate       DateTime?
  instructorId          String
  isMandatory           Boolean               @default(false)

  // Relations
  instructor            User                  @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules               Module[]
  enrollments           Enrollment[]
  progress              CourseProgress[]
  
  // Prerequisite relation
  prerequisiteId        String?
  prerequisite          Course?               @relation("CoursePrerequisites", fields: [prerequisiteId], references: [id], onDelete: SetNull)
  prerequisiteFor       Course[]              @relation("CoursePrerequisites")

  assignments           CourseAssignment[]
  
  // Certificate relation
  certificateTemplateId String?
  certificateTemplate   CertificateTemplate?  @relation(fields: [certificateTemplateId], references: [id], onDelete: SetNull)

  // New field for average completion
  averageCompletion     Float?

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completionRecords LessonCompletionRecord[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@map("content_blocks")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- ENROLLMENT & PROGRESS ---
model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Int?
  completedAt         DateTime?
  lastActivity        DateTime  @default(now()) @updatedAt
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id           String @id @default(cuid())
    progressId   String
    lessonId     String
    completedAt  DateTime @default(now())
    type         String // 'view', 'quiz', etc.
    score        Float?   // Score for quizzes
    
    progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson       Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}


// --- QUIZZES & FORMS ---
model Quiz {
  id          String       @id @default(cuid())
  title       String
  description String?
  contentBlockId String    @unique
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
  maxAttempts Int?

  @@map("quizzes")
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  type     QuestionType
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
}

model AnswerOption {
  id          String @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int     @default(0) // Puntos por respuesta correcta
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]

  @@map("answer_options")
}

model QuizAttempt {
    id             String @id @default(cuid())
    userId         String
    quizId         String
    attemptNumber  Int
    score          Float
    submittedAt    DateTime @default(now())
    
    user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz           Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers        AnswerAttempt[]

    @@map("quiz_attempts")
}

model AnswerAttempt {
    id              String @id @default(cuid())
    quizAttemptId   String
    questionId      String
    selectedOptionId String
    
    quizAttempt     QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}

model Form {
    id           String @id @default(cuid())
    title        String
    description  String?
    creatorId    String
    creator      User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    status       FormStatus @default(DRAFT)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    
    isQuiz       Boolean @default(false)
    fields       FormField[]
    responses    FormResponse[]
    sharedWith   User[] @relation("FormSharedWith")

    @@map("forms")
}

model FormField {
    id          String @id @default(cuid())
    label       String
    type        FormFieldType
    required    Boolean @default(false)
    placeholder String?
    options     Json? // For select, radio, checkbox
    order       Int
    formId      String
    form        Form @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]

    @@map("form_fields")
}

model FormResponse {
    id           String @id @default(cuid())
    formId       String
    form         Form @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId       String
    user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt  DateTime @default(now())
    score        Float? // For quizzes
    answers      FormAnswer[]

    @@map("form_responses")
}

model FormAnswer {
    id         String @id @default(cuid())
    responseId String
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId    String
    field      FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value      String @db.Text

    @@map("form_answers")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  EMAIL
  NUMBER
}

// --- GLOBAL CONTENT ---
model EnterpriseResource {
  id              String @id @default(cuid())
  title           String
  description     String?
  type            ResourceType
  url             String?      @db.Text
  content         String?      @db.Text
  observations    String?      @db.Text
  version         Int          @default(1)
  category        String
  tags            String?
  uploadDate      DateTime     @default(now())
  status          ResourceStatus @default(ACTIVE)
  uploaderId      String
  ispublic        Boolean      @default(true)
  pin             String?
  size            Int?
  fileType        String?      // e.g., 'application/pdf', 'image/png'
  expiresAt       DateTime?

  uploader        User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  sharedWith      User[]       @relation("SharedWithUsers")
  parentId        String?
  parent          EnterpriseResource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        EnterpriseResource[] @relation("FolderHierarchy")
  versions        ResourceVersion[]

  @@map("enterprise_resources")
}

model ResourceVersion {
  id            String @id @default(cuid())
  resourceId    String
  resource      EnterpriseResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  version       Int
  content       String? @db.Text
  createdAt     DateTime @default(now())
  authorId      String
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("resource_versions")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  VIDEO
  IMAGE
  AUDIO
  ARCHIVE
  EXTERNAL_LINK
  GUIDE
  MANUAL
  POLICY
  OTHER
  DOCUMENTO_EDITABLE
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  date        DateTime @default(now())
  authorId    String
  audience    String   // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT'
  priority    String   // 'Normal', 'Urgente'
  isPinned    Boolean  @default(false)
  
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reads       AnnouncementRead[]
  reactions   AnnouncementReaction[]
  attachments AnnouncementAttachment[]
  notifications Notification[]

  @@map("announcements")
}

model AnnouncementRead {
  id             String @id @default(cuid())
  userId         String
  announcementId String
  readAt         DateTime @default(now())

  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@map("announcement_reads")
}

model AnnouncementReaction {
  id             String @id @default(cuid())
  userId         String
  announcementId String
  reaction       String // Emoji
  
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@map("announcement_reactions")
}

model AnnouncementAttachment {
  id              String @id @default(cuid())
  name            String
  url             String
  type            String
  size            Int
  announcementId  String
  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@map("announcement_attachments")
}


model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  audienceType        String // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String   @default("blue")
  creatorId           String
  videoConferenceLink String?
  
  // Recurrence fields
  recurrence          RecurrenceType @default(NONE)
  recurrenceEndDate   DateTime?
  isInteractive       Boolean @default(false)
  
  creator             User     @relation(fields: [creatorId], references: [id], onDelete:Cascade)
  attendees           User[]   @relation("EventAttendees")
  attachments         Json?
  participations      EventParticipation[]

  @@map("calendar_events")
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model EventParticipation {
  id              String @id @default(cuid())
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId         String
  event           CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  occurrenceDate  DateTime
  
  @@unique([userId, eventId, occurrenceDate])
  @@map("event_participations")
}


model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("user_notes")
}


// --- GAMIFICATION ---
model Achievement {
  id          String   @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  points      Int
  icon        String?
  
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id             String @id @default(cuid())
  userId         String
  achievementId  String
  unlockedAt     DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
  TEN_COURSES_COMPLETED
  TWENTY_COURSES_COMPLETED
  FIRST_NOTE
  FIRST_REACTION
  FIRST_RESOURCE_DOWNLOAD
  FIRST_COURSE_PUBLISHED
  HIGH_PERFORMER
  LEVEL_5_REACHED
  LEVEL_10_REACHED
  LEVEL_20_REACHED
}


// --- NOTIFICATIONS ---
model Notification {
  id                      String @id @default(cuid())
  userId                  String
  title                   String
  description             String?
  link                    String?
  read                    Boolean @default(false)
  createdAt               DateTime @default(now())
  
  // Relations
  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Specific notification types
  announcementId          String?
  announcement            Announcement? @relation(fields: [announcementId], references: [id])
  
  isMotivational          Boolean @default(false)
  motivationalMessageId   String?
  motivationalMessage     MotivationalMessage? @relation(fields: [motivationalMessageId], references: [id], onDelete: Cascade)

  interactiveEventId          String?
  interactiveEventOccurrence  DateTime?

  @@map("notifications")
}

// --- Motivational Messages ---
model MotivationalMessage {
    id          String @id @default(cuid())
    title       String
    content     String? @db.Text
    imageUrl    String?
    videoUrl    String?
    triggerType MotivationalMessageTriggerType
    triggerId   String // Can be a courseId or a level identifier like 'level-5'
    creatorId   String
    creator     User @relation(fields: [creatorId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    notifications Notification[]

    @@map("motivational_messages")
}

enum MotivationalMessageTriggerType {
    COURSE_ENROLLMENT
    COURSE_MID_PROGRESS
    COURSE_NEAR_COMPLETION
    COURSE_COMPLETION
    LEVEL_UP
}


// --- SYSTEM & ADMIN ---
model PlatformSettings {
  id                          String    @id @default("cl-nexus-settings-default")
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  announcementsImageUrl       String?
  publicPagesBgUrl            String?
  securityMascotUrl           String?
  fontHeadline                String    @default("Space Grotesk")
  fontBody                    String    @default("Inter")
  
  // Empty State Images
  emptyStateCoursesUrl        String?
  emptyStateMyCoursesUrl      String?
  emptyStateFormsUrl          String?
  emptyStateMyNotesUrl        String?
  emptyStateResourcesUrl      String?
  emptyStateCertificatesUrl   String?
  emptyStateMotivationsUrl    String?
  emptyStateUsersUrl          String?
  emptyStateLeaderboardUrl    String?
  
  // Theme Colors
  primaryColor                String?   @default("#6366f1")
  secondaryColor              String?   @default("#a5b4fc")
  accentColor                 String?   @default("#ec4899")
  backgroundColorLight        String?   @default("#f8fafc")
  primaryColorDark            String?   @default("#a5b4fc")
  backgroundColorDark         String?   @default("#020617")
  
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @default("alprigrama.com") // Comma-separated
  
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  
  resourceCategories          String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  updatedAt                   DateTime  @updatedAt

  @@map("platform_settings")
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String
  ipAddress    String?
  userId       String?
  emailAttempt String?
  details      String?
  createdAt    DateTime @default(now())
  userAgent    String?
  country      String?
  city         String?

  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model CourseAssignment {
  id           String   @id @default(cuid())
  courseId     String
  userId       String
  assignedAt   DateTime @default(now())
  assignedById String

  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([courseId, userId])
  @@map("course_assignments")
}

model CertificateTemplate {
  id                  String  @id @default(cuid())
  name                String  @unique
  backgroundImageUrl  String
  
  // Customization fields
  textColor           String? @default("#000000")
  fontFamilyHeadline  String? @default("Space Grotesk")
  fontFamilyBody      String? @default("Inter")
  
  // JSON fields to store position and style
  studentNamePosition Json?
  courseNamePosition  Json?
  datePosition        Json?
  scorePosition       Json?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  courses             Course[]

  @@map("certificate_templates")
}


model Process {
    id        String @id @default(cuid())
    name      String @unique
    parentId  String?
    
    parent    Process? @relation("ProcessHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
    children  Process[] @relation("ProcessHierarchy")
    users     User[]

    @@map("processes")
}

// --- CHAT ---
model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isGroup     Boolean   @default(false)
  groupName   String?
  groupAvatar String?
  
  participants User[]
  messages    Message[]

  @@map("conversations")
}

model Message {
  id              String       @id @default(cuid())
  content         String?      @db.Text
  createdAt       DateTime     @default(now())
  authorId        String
  conversationId  String
  isRead          Boolean      @default(false)

  author          User         @relation("MessageAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments     ChatAttachment[]

  @@map("messages")
}

model ChatAttachment {
  id        String @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("chat_attachments")
}

// Model for sending real-time messages through a Supabase table
model RealtimeMessage {
  id          Int      @id @default(autoincrement())
  channel     String
  event       String
  payload     Json
  created_at  DateTime @default(now())

  @@map("realtime_messages")
}
