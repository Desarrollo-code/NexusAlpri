// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------
// ENUMS
// -------------------
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

enum Priority {
  Low
  Normal
  High
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// -------------------
// MODELS
// -------------------
model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  avatar              String?
  role                UserRole             @default(STUDENT)
  isActive            Boolean              @default(true)
  registeredDate      DateTime             @default(now())
  lastLogin           DateTime?
  theme               String?
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  xp                  Int                  @default(0)

  // Relations
  coursesAsInstructor Course[]             @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  achievements        UserAchievement[]
  announcements       Announcement[]
  announcementReads   AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  notifications       Notification[]
  resourcesUploaded   EnterpriseResource[]
  createdEvents       CalendarEvent[]      @relation("EventCreator")
  attendedEvents      CalendarEvent[]      @relation("EventAttendees")
  securityLogs        SecurityLog[]
  notes               UserNote[]
  forms               Form[]
  formResponses       FormResponse[]
  createdTemplates    LessonTemplate[]

  @@map("users")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  category        String?
  imageUrl        String?
  instructorId    String
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  instructor      User         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module            Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks     ContentBlock[]
  completionRecords LessonCompletionRecord[]
  notes             UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@map("content_blocks")
}

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?
  contentBlockId String    @unique
  maxAttempts    Int?

  // Relations
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id          String         @id @default(cuid())
  text        String
  type        QuestionType   @default(SINGLE_CHOICE)
  order       Int
  quizId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  attempts    AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int      @default(0)
  questionId  String

  // Relations
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@map("answer_options")
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  
  // Relations
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id           String   @id @default(cuid())
    progressId   String
    lessonId     String
    completedAt  DateTime @default(now())
    type         String   // 'view', 'video', 'quiz'
    score        Float?   // Score for quiz-type completions

    // Relations
    progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}

model QuizAttempt {
    id           String   @id @default(cuid())
    userId       String
    quizId       String
    attemptNumber Int
    score        Float
    submittedAt  DateTime @default(now())

    // Relations
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers      AnswerAttempt[]
    
    @@map("quiz_attempts")
}

model AnswerAttempt {
    id               String @id @default(cuid())
    quizAttemptId    String
    questionId       String
    selectedOptionId String
    
    // Relations
    quizAttempt      QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String
  points       Int
  
  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id             String      @id @default(cuid())
  userId         String
  achievementId  String
  unlockedAt     DateTime    @default(now())
  
  // Relations
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement    Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  date        DateTime  @default(now())
  authorId    String
  audience    String // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT'
  priority    Priority  @default(Normal)
  isPinned    Boolean   @default(false)
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reads       AnnouncementRead[]
  reactions   AnnouncementReaction[]
  attachments AnnouncementAttachment[]
  Notification Notification[]

  @@map("announcements")
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  userId         String
  announcementId String
  readAt         DateTime     @default(now())

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@map("announcement_reads")
}

model AnnouncementReaction {
    id              String       @id @default(cuid())
    userId          String
    announcementId  String
    reaction        String // Emoji
    createdAt       DateTime     @default(now())

    // Relations
    user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    
    @@unique([userId, announcementId])
    @@map("announcement_reactions")
}

model AnnouncementAttachment {
    id             String       @id @default(cuid())
    name           String
    url            String
    type           String
    size           Int
    announcementId String

    // Relations
    announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

    @@map("announcement_attachments")
}


model Notification {
  id             String    @id @default(cuid())
  userId         String
  title          String
  description    String?
  link           String?
  read           Boolean   @default(false)
  createdAt      DateTime  @default(now())
  
  // Relation to Announcement
  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EnterpriseResource {
  id           String      @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  url          String?
  uploaderId   String
  uploadDate   DateTime    @default(now())
  ispublic     Boolean     @default(true)
  parentId     String?
  category     String?
  tags         String?
  pin          String?
  status       ResourceStatus @default(ACTIVE)
  expiresAt    DateTime?

  // Relations
  uploader     User        @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parent       EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderHierarchy")
  sharedWith   User[]

  @@map("enterprise_resources")
}


model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  color               String
  audienceType        EventAudienceType
  creatorId           String
  videoConferenceLink String?
  attachments         Json?

  // Relations
  creator             User   @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[] @relation("EventAttendees")

  @@map("calendar_events")
}

model SecurityLog {
    id              String @id @default(cuid())
    event           SecurityLogEvent
    userId          String?
    emailAttempt    String?
    ipAddress       String?
    userAgent       String? @db.Text
    country         String?
    city            String?
    details         String? @db.Text
    createdAt       DateTime @default(now())

    // Relation
    user            User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
    id                          String    @id @default("cl-nexus-settings-default")
    platformName                String    @default("NexusAlpri")
    logoUrl                     String?
    watermarkUrl                String?
    landingImageUrl             String?
    authImageUrl                String?
    aboutImageUrl               String?
    benefitsImageUrl            String?
    
    // Auth & Security
    allowPublicRegistration     Boolean   @default(true)
    emailWhitelist              String?   // Comma-separated domains
    require2faForAdmins         Boolean   @default(false)
    enableIdleTimeout           Boolean   @default(true)
    idleTimeoutMinutes          Int       @default(20)

    // Password Policy
    passwordMinLength           Int       @default(8)
    passwordRequireUppercase    Boolean   @default(true)
    passwordRequireLowercase    Boolean   @default(true)
    passwordRequireNumber       Boolean   @default(true)
    passwordRequireSpecialChar  Boolean   @default(false)

    // Appearance
    primaryColor                String    @default("#6366f1")
    secondaryColor              String    @default("#a5b4fc")
    accentColor                 String    @default("#ec4899")
    backgroundColorLight        String    @default("#f8fafc")
    primaryColorDark            String    @default("#a5b4fc")
    backgroundColorDark         String    @default("#020617")
    fontHeadline                String    @default("Space Grotesk")
    fontBody                    String    @default("Inter")
    
    // Content
    resourceCategories          String    @default("General,Recursos Humanos,TI,Marketing,Ventas")
    
    updatedAt                   DateTime  @updatedAt
}

model LessonTemplate {
  id                String       @id @default(cuid())
  name              String
  description       String?
  type              TemplateType // SYSTEM or USER
  creatorId         String?      // Null for SYSTEM templates
  createdAt         DateTime     @default(now())

  // Relations
  creator           User?        @relation(fields: [creatorId], references: [id])
  templateBlocks    TemplateBlock[]

  @@map("lesson_templates")
}

model TemplateBlock {
  id                String     @id @default(cuid())
  type              LessonType
  order             Int
  lessonTemplateId  String

  // Relations
  lessonTemplate    LessonTemplate @relation(fields: [lessonTemplateId], references: [id], onDelete: Cascade)
  
  @@map("template_blocks")
}


model Form {
    id           String     @id @default(cuid())
    title        String
    description  String?
    creatorId    String
    status       FormStatus @default(DRAFT)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    isQuiz       Boolean    @default(false)

    // Relations
    creator      User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    fields       FormField[]
    responses    FormResponse[]
    sharedWith   User[]     @relation("FormShares")

    @@map("forms")
}

model FormField {
    id           String       @id @default(cuid())
    label        String
    type         FormFieldType
    required     Boolean
    placeholder  String?
    options      Json?        // [{ id, text, isCorrect, points }]
    order        Int
    formId       String

    // Relations
    form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers      Answer[]

    @@map("form_fields")
}

model FormResponse {
    id           String     @id @default(cuid())
    formId       String
    userId       String
    submittedAt  DateTime   @default(now())
    score        Float?

    // Relations
    form         Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers      Answer[]

    @@map("form_responses")
}

model Answer {
    id           String     @id @default(cuid())
    responseId   String
    fieldId      String
    value        String     @db.Text // Storing single values, or stringified array for multiple choice

    // Relations
    response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@map("answers")
}

// UserNote model para los apuntes de los estudiantes.
model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow") // Color for the sticky note
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}
