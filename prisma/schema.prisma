// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ---------------------------------
// ENUMS - Definiciones de tipos
// ---------------------------------
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum ReactionType {
  LIKE
  LOVE
  CELEBRATE
  INSIGHTFUL
  CURIOUS
}

enum PermissionType {
  VIEW
  EDIT
  MANAGE_PERMISSIONS
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// ---------------------------------
// MODELOS PRINCIPALES
// ---------------------------------

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime? @default(now())
  lastLogin           DateTime?
  isActive            Boolean   @default(true)
  xp                  Int       @default(0)

  // Relaciones
  createdCourses    Course[]             @relation("CreatedCourses")
  enrollments       Enrollment[]
  courseProgress    CourseProgress[]
  quizAttempts      QuizAttempt[]
  notifications     Notification[]
  createdEvents     CalendarEvent[]      @relation("CreatedEvents")
  attendedEvents    CalendarEvent[]      @relation("EventAttendees")
  uploadedResources Resource[]
  userNotes         UserNote[]
  securityLogs      SecurityLog[]
  createdTemplates  LessonTemplate[]
  unlockedAchievements UserAchievement[]
  createdForms      Form[]
  formResponses     FormResponse[]
  announcementReactions AnnouncementReaction[]
  announcementReceipts AnnouncementReceipt[]
  resourcePermissions   ResourcePermission[]

  @@map("users")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  category        String?
  status          CourseStatus @default(DRAFT)
  imageUrl        String?
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relaciones
  instructor   User         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId String
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]

  @@map("modules")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  module          Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId        String
  contentBlocks   ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes       UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relaciones
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  quiz     Quiz?

  @@map("content_blocks")
}

model Quiz {
  id           String  @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?

  // Relaciones
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String       @unique
  questions    Question[]
  attempts     QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id        String   @id @default(cuid())
  text      String
  type      QuestionType @default(SINGLE_CHOICE)
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId  String
  options AnswerOption[]
  attempts AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String?
  points     Int     @default(0)

  // Relaciones
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  AnswerAttempt AnswerAttempt[]

  @@map("answer_options")
}

// ---------------------------------
// MODELOS DE PROGRESO Y GAMIFICACIÃ“N
// ---------------------------------

model Enrollment {
  id         String   @id @default(cuid())
  enrolledAt DateTime @default(now())

  // Relaciones
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  progress CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String    @id @default(cuid())
  progressPercentage Float     @default(0)
  completedAt        DateTime?

  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId String @unique
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  completedAt DateTime @default(now())
  type        String // "view", "quiz", "video"
  score       Float?

  // Relaciones
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model QuizAttempt {
  id           String   @id @default(cuid())
  attemptNumber Int
  score        Float
  submittedAt  DateTime @default(now())

  // Relaciones
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  quiz     Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   String
  answers  AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id String @id @default(cuid())

  // Relaciones
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction) // NoAction to avoid cycles
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String

  @@map("answer_attempts")
}

model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Achievement {
  id          String   @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  points      Int
  icon        String?

  // Relaciones
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id          String   @id @default(cuid())
  unlockedAt  DateTime @default(now())

  // Relaciones
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String

  @@unique([userId, achievementId])
  @@map("user_achievements")
}


// ---------------------------------
// MODELOS DE CONTENIDO GLOBAL
// ---------------------------------

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime    @default(now())
  status       ResourceStatus @default(ACTIVE)
  expiresAt    DateTime?
  pin          String?
  ispublic     Boolean     @default(true)

  // Relaciones
  uploader     User?       @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId   String?
  parent       Resource?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String?
  children     Resource[]  @relation("FolderHierarchy")
  sharedWith   User[]      @relation("SharedResources")
  permissions  ResourcePermission[]

  @@map("resources")
}

model ResourcePermission {
  id           String @id @default(cuid())
  type         PermissionType

  // Relaciones
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId   String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@unique([resourceId, userId, type])
  @@map("resource_permissions")
}


model Announcement {
  id         String       @id @default(cuid())
  title      String
  content    String       @db.Text
  date       DateTime     @default(now())
  priority   String       @default("Normal")
  audience   String       // UserRole o 'ALL'

  // Relaciones
  author     User?        @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId   String?
  attachments AnnouncementAttachment[]
  reactions  AnnouncementReaction[]
  receipts   AnnouncementReceipt[]

  @@map("announcements")
}

model AnnouncementAttachment {
    id String @id @default(cuid())
    name String
    url String
    type String
    size Int

    // RelaciÃ³n
    announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    announcementId String

    @@map("announcement_attachments")
}

model AnnouncementReaction {
    id   String @id @default(cuid())
    type ReactionType

    // RelaciÃ³n
    announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    announcementId String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    
    @@unique([announcementId, userId, type])
    @@map("announcement_reactions")
}

model AnnouncementReceipt {
    id      String   @id @default(cuid())
    readAt  DateTime @default(now())

    // RelaciÃ³n
    announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    announcementId String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String

    @@unique([announcementId, userId])
    @@map("announcement_receipts")
}


model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  location    String?
  start       DateTime
  end         DateTime
  allDay      Boolean  @default(false)
  color       String   @default("blue")
  audienceType EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments Json[]

  // Relaciones
  creator   User   @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  attendees User[] @relation("EventAttendees")

  @@map("calendar_events")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("notifications")
}

// ---------------------------------
// MODELOS DE FORMULARIOS
// ---------------------------------

model Form {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      FormStatus  @default(DRAFT)
  isQuiz      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relaciones
  creator     User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]      @relation("SharedForms")

  @@map("forms")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // Para SINGLE_CHOICE y MULTIPLE_CHOICE
  order       Int

  // Relaciones
  form      Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  answers   FormAnswer[]

  @@map("form_fields")
}

model FormResponse {
  id          String   @id @default(cuid())
  submittedAt DateTime @default(now())
  score       Float?   // Para quizzes

  // Relaciones
  form      Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  answers   FormAnswer[]

  @@map("form_responses")
}

model FormAnswer {
  id         String @id @default(cuid())
  value      String @db.Text

  // Relaciones
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId    String

  @@map("form_answers")
}



// ---------------------------------
// MODELOS DEL SISTEMA
// ---------------------------------
model PlatformSettings {
    id                         String  @id @default(cuid())
    platformName               String  @default("NexusAlpri")
    allowPublicRegistration    Boolean @default(true)
    enableEmailNotifications   Boolean @default(true)
    emailWhitelist             String?
    passwordMinLength          Int     @default(8)
    passwordRequireUppercase   Boolean @default(true)
    passwordRequireLowercase   Boolean @default(true)
    passwordRequireNumber      Boolean @default(true)
    passwordRequireSpecialChar Boolean @default(true)
    enableIdleTimeout          Boolean @default(true)
    idleTimeoutMinutes         Int     @default(20)
    require2faForAdmins        Boolean @default(false)
    resourceCategories         String
    
    // THEME & APPEARANCE
    primaryColor               String?
    secondaryColor             String?
    accentColor                String?
    backgroundColorLight       String?
    fontHeadline               String?
    fontBody                   String?
    
    // THEME DARK
    primaryColorDark           String?
    backgroundColorDark        String?
    
    // IMAGES
    logoUrl                    String?
    watermarkUrl               String?
    landingImageUrl            String?
    authImageUrl               String?
    aboutImageUrl              String?
    benefitsImageUrl           String?

    updatedAt                  DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime         @default(now())
  emailAttempt String?

  // Relaciones
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  @@map("security_logs")
}

model LessonTemplate {
  id           String         @id @default(cuid())
  name         String
  description  String?
  type         TemplateType   @default(USER)
  createdAt    DateTime       @default(now())

  // Relaciones
  creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId      String?
  templateBlocks TemplateBlock[]

  @@map("lesson_templates")
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int

  // Relaciones
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String

  @@map("template_blocks")
}
