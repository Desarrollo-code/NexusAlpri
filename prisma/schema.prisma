// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
    ACTIVE
    ARCHIVED
}

enum NotificationType {
  GENERAL
  ANNOUNCEMENT
  COURSE_UPDATE
  ACHIEVEMENT
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                   String        @id @default(cuid())
  name                 String
  email                String        @unique
  password             String
  avatar               String?
  role                 UserRole      @default(STUDENT)
  isActive             Boolean       @default(true)
  registeredDate       DateTime      @default(now())
  lastLogin            DateTime?
  xp                   Int           @default(0)
  theme                String?
  isTwoFactorEnabled   Boolean       @default(false)
  twoFactorSecret      String?

  coursesAsInstructor  Course[]      @relation("InstructorCourses")
  enrollments          Enrollment[]
  courseProgress       CourseProgress[]
  announcements        Announcement[]
  notifications        Notification[]
  userNotes            UserNote[]
  createdForms         Form[]        @relation("FormCreator")
  formResponses        FormResponse[]
  quizAttempts         QuizAttempt[]
  userAchievements     UserAchievement[]
  uploadedResources    EnterpriseResource[]
  createdEvents        CalendarEvent[]
  attendedEvents       CalendarEvent[] @relation("EventAttendees")
  announcementReads    AnnouncementRead[]
  announcementReactions AnnouncementReaction[]

  sharedResources EnterpriseResource[] @relation("SharedResources")
  sharedForms     Form[] @relation("SharedForms")
  
  @@map("users")
}


model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?

  instructorId    String
  instructor      User           @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]

  @@map("courses")
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons  Lesson[]

  @@map("modules")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks   ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes       UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?

  @@map("content_blocks")
}


model Quiz {
  id             String      @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?

  contentBlockId String      @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions      Question[]
  attempts       QuizAttempt[]
  
  @@map("quizzes")
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  type    QuestionType @default(SINGLE_CHOICE)

  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  points     Int      @default(0)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]

  @@map("answer_options")
}


model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float    @default(0)
  completedAt         DateTime?
  
  enrollmentId        String   @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  completedLessons    LessonCompletionRecord[]

  @@map("course_progress")
}

model LessonCompletionRecord {
  id           String      @id @default(cuid())
  progressId   String
  lessonId     String
  completedAt  DateTime    @default(now())
  type         String      // 'view', 'quiz', 'video'
  score        Float?      // Only for quizzes

  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}


model QuizAttempt {
  id             String      @id @default(cuid())
  userId         String
  quizId         String
  attemptNumber  Int
  score          Float
  submittedAt    DateTime    @default(now())

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz           Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  answers        AnswerAttempt[]
  
  @@map("quiz_attempts")
}


model AnswerAttempt {
  id              String      @id @default(cuid())
  attemptId       String
  questionId      String
  selectedOptionId String

  attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  
  @@map("answer_attempts")
}


model UserNote {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  content    String   @db.Text
  color      String   @default("yellow")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}


model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  date        DateTime  @default(now())
  authorId    String
  audience    String    // 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR'
  priority    String    @default("Normal")
  isPinned    Boolean   @default(false)
  
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  attachments AnnouncementAttachment[]
  reads       AnnouncementRead[]
  reactions   AnnouncementReaction[]
  notifications Notification[] // Relaci√≥n inversa

  @@map("announcements")
}

model AnnouncementAttachment {
  id              String      @id @default(cuid())
  name            String
  url             String
  type            String
  size            Int
  announcementId  String
  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  @@map("announcement_attachments")
}

model AnnouncementRead {
  id             String      @id @default(cuid())
  userId         String
  announcementId String
  readAt         DateTime    @default(now())
  
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, announcementId])
  @@map("announcement_reads")
}

model AnnouncementReaction {
  id             String      @id @default(cuid())
  userId         String
  announcementId String
  reaction       String      // e.g., 'üëç', '‚ù§Ô∏è'
  
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, announcementId])
  @@map("announcement_reactions")
}


model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  type        NotificationType @default(GENERAL)

  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}


model EnterpriseResource {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  category    String?
  tags        String?
  ispublic    Boolean   @default(true)
  pin         String?
  status      ResourceStatus @default(ACTIVE)
  expiresAt   DateTime?
  
  uploadDate  DateTime  @default(now())
  uploaderId  String
  uploader    User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  parentId    String?
  parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    EnterpriseResource[] @relation("FolderHierarchy")
  
  sharedWith User[] @relation("SharedResources")
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  audienceType        EventAudienceType
  color               String   @default("blue")
  attachments         Json?
  
  creatorId           String
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@map("calendar_events")
}


model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?
  require2faForAdmins         Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  resourceCategories          String    @default("General")

  primaryColor                String?
  secondaryColor              String?
  accentColor                 String?
  backgroundColorLight        String?
  primaryColorDark            String?
  backgroundColorDark         String?

  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  fontHeadline                String?
  fontBody                    String?
  
  updatedAt                   DateTime  @updatedAt
}


model Achievement {
  id           String      @id @default(cuid())
  slug         AchievementSlug @unique
  name         String
  description  String
  icon         String
  points       Int
  
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  country      String?
  city         String?
}

model LessonTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  type           String           // SYSTEM or USER
  creatorId      String?
  createdAt      DateTime         @default(now())
  
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       LessonType
  order      Int
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean  @default(false)
  
  creatorId   String
  creator     User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields      FormField[]
  responses   FormResponse[]
  sharedWith User[] @relation("SharedForms")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json? // For 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  required    Boolean  @default(false)
  placeholder String?
  order       Int
  
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  answers     FormAnswer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  score       Float?   // Only if isQuiz is true
  submittedAt DateTime @default(now())
  
  answers     FormAnswer[]
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  value      String
}
