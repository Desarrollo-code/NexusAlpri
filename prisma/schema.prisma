// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------
// --- AUTH & USER ---
// -------------------

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  name                String
  password            String
  avatar              String?
  theme               String?  @default("light")
  role                UserRole @default(STUDENT)
  isActive            Boolean  @default(true)
  registeredDate      DateTime @default(now())
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?
  xp                  Int?     @default(0)
  lastLogin           DateTime?
  
  processId           String?
  process             Process? @relation(fields: [processId], references: [id], onDelete: SetNull)

  taughtCourses       Course[]         @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  announcements       Announcement[]
  notifications       Notification[]
  userNotes           UserNote[]
  resourceUploads     EnterpriseResource[]
  sharedResources     EnterpriseResource[] @relation("SharedWithUsers")
  achievementUnlocks  UserAchievement[]
  forms               Form[]
  formResponses       FormResponse[]
  authoredVersions    ResourceVersion[]
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
  eventParticipations EventParticipation[]
  messages            Message[]
  conversations       Conversation[]     @relation("ConversationParticipants")
  announcementReads   AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  quizAttempts        QuizAttempt[]

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model SecurityLog {
  id           String   @id @default(cuid())
  userId       String?
  event        String
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime @default(now())
  emailAttempt String?
  country      String?
  city         String?
  lat          Float?
  lng          Float?
  
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}


// -------------------
// ---   COURSES   ---
// -------------------

model Course {
  id                     String    @id @default(cuid())
  title                  String
  description            String
  category               String
  status                 CourseStatus @default(DRAFT)
  imageUrl               String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  publicationDate        DateTime?
  instructorId           String
  
  isMandatory            Boolean   @default(false)

  // Relación de prerrequisito
  prerequisiteId         String?   @unique
  prerequisite           Course?   @relation("CoursePrerequisite", fields: [prerequisiteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prerequisiteFor        Course?   @relation("CoursePrerequisite")
  
  // Relación con plantillas de certificado
  certificateTemplateId  String?
  certificateTemplate    CertificateTemplate? @relation(fields: [certificateTemplateId], references: [id], onDelete: SetNull)

  instructor             User      @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules                Module[]
  enrollments            Enrollment[]
  progress               CourseProgress[]
  assignments            CourseAssignment[]
  
  averageCompletion      Float?
  
  @@index([instructorId])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
    id                 String   @id @default(cuid())
    userId             String
    courseId           String
    progressPercentage Float    @default(0)
    completedAt        DateTime?
    lastActivity       DateTime? @updatedAt
    
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    completedLessons   LessonCompletionRecord[]

    @@unique([userId, courseId])
    @@index([userId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    completedAt DateTime @default(now())
    type        String // \'view\', \'quiz\', \'video\'
    score       Float?

    progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model CourseAssignment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  assignedById String
  assignedAt   DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignedBy User   @relation("AssignedBy", fields: [assignedById], references: [id], onDelete: NoAction)
  
  @@unique([userId, courseId])
  @@index([assignedById])
}


// -------------------
// ---     QUIZ    ---
// -------------------

model Quiz {
  id           String   @id @default(cuid())
  title        String
  description  String?
  contentBlockId String @unique
  maxAttempts  Int?     // Número máximo de intentos permitidos
  
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String       @id @default(cuid())
  text    String
  order   Int
  type    QuestionType @default(SINGLE_CHOICE)
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  points     Int     @default(0) // Puntos por respuesta correcta
  questionId String
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerAttempts AnswerAttempt[]
  
  @@index([questionId])
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float // Score in percentage (0-100)
    submittedAt   DateTime @default(now())

    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]
    
    @@index([userId, quizId])
}

model AnswerAttempt {
    id             String @id @default(cuid())
    attemptId      String
    questionId     String
    selectedOptionId String
    
    attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


// -------------------
// ---   CONTENT   ---
// -------------------
model EnterpriseResource {
    id          String  @id @default(cuid())
    title       String
    description String?
    type        ResourceType
    url         String?
    ispublic    Boolean      @default(false)
    pin         String?
    category    String?
    tags        String?
    status      ResourceStatus @default(ACTIVE)
    expiresAt   DateTime?    // Fecha en que el recurso expira o debe ser revisado

    content     String?      @db.Text // Para documentos editables
    version     Int          @default(1)
    observations String?     @db.Text // Notas internas visibles solo para admins/instructores

    parentId    String?
    uploaderId  String
    
    parent      EnterpriseResource?  @relation("ResourceHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
    children    EnterpriseResource[] @relation("ResourceHierarchy")
    uploader    User                 @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
    sharedWith  User[]               @relation("SharedWithUsers")

    versions    ResourceVersion[] // Historial de versiones del contenido

    uploadDate  DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    size        Int?      // Tamaño del archivo en bytes
    fileType    String?   // MIME type del archivo
    
    @@index([parentId])
    @@index([uploaderId])
}

model ResourceVersion {
    id         String   @id @default(cuid())
    resourceId String
    version    Int
    content    String?  @db.Text
    createdAt  DateTime @default(now())
    authorId   String

    resource   EnterpriseResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
    author     User               @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@index([resourceId])
}

enum ResourceType {
    FOLDER
    DOCUMENTO_EDITABLE
    DOCUMENT
    VIDEO
    IMAGE
    AUDIO
    EXTERNAL_LINK
    OTHER
    GUIDE
    MANUAL
    POLICY
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// -----------------------
// --- COMMUNICATIONS ---
// -----------------------

model Announcement {
  id           String   @id @default(cuid())
  title        String
  content      String   @db.Text
  date         DateTime @default(now())
  authorId     String
  audience     String // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT
  priority     String   @default("Normal") // Normal, Urgente
  isPinned     Boolean  @default(false)
  
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reads         AnnouncementRead[]
  reactions     AnnouncementReaction[]
  attachments   AnnouncementAttachment[]
  notifications Notification[]
  
  @@index([authorId])
}

model AnnouncementAttachment {
  id             String      @id @default(cuid())
  name           String
  url            String
  type           String
  size           Int
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model AnnouncementRead {
  id             String      @id @default(cuid())
  userId         String
  announcementId String
  readAt         DateTime    @default(now())
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement  Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, announcementId])
}

model AnnouncementReaction {
  id             String      @id @default(cuid())
  userId         String
  announcementId String
  reaction       String      // e.g., \'👍\', \'❤️\'
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement  Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
}

model CalendarEvent {
  id                String       @id @default(cuid())
  title             String
  description       String?
  location          String?
  start             DateTime
  end               DateTime
  allDay            Boolean      @default(false)
  audienceType      String       // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color             String       @default("blue")
  creatorId         String
  videoConferenceLink String?
  isInteractive     Boolean      @default(false)

  // Campos para recurrencia
  recurrence        RecurrenceType @default(NONE)
  recurrenceEndDate DateTime?
  
  creator           User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees         User[] @relation("EventAttendees")
  
  attachments       Json? // Para enlaces u otros
  participations    EventParticipation[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([creatorId])
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model EventParticipation {
  id             String   @id @default(cuid())
  userId         String
  eventId        String
  occurrenceDate DateTime // La fecha específica de la ocurrencia en la que participó
  participatedAt DateTime @default(now())

  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, occurrenceDate])
  @@index([eventId])
}


model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  // Campos para mensajes motivacionales
  isMotivational        Boolean @default(false)
  motivationalMessageId String?
  motivationalMessage   MotivationalMessage? @relation(fields: [motivationalMessageId], references: [id], onDelete: SetNull)

  // Campos para eventos interactivos
  interactiveEventId          String?
  interactiveEventOccurrence  DateTime?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Message {
  id              String      @id @default(cuid())
  content         String?     @db.Text
  createdAt       DateTime    @default(now())
  isRead          Boolean     @default(false)
  
  authorId        String
  conversationId  String
  
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  conversation    Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments     ChatAttachment[]

  @@index([conversationId])
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isGroup     Boolean   @default(false)
  groupName   String?
  groupAvatar String?
  
  participants User[]      @relation("ConversationParticipants")
  messages     Message[]
}

model ChatAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}


// --- TEMPLATES ---

model LessonTemplate {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  type         TemplateType   @default(USER) // SYSTEM or USER
  creatorId    String?        // Null for SYSTEM templates
  creator      User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum TemplateType {
  SYSTEM
  USER
}

model CertificateTemplate {
  id                  String @id @default(cuid())
  name                String @unique
  backgroundImageUrl  String
  
  // Posiciones y estilos como objetos JSON
  textColor           String? @default("#000000")
  studentNamePosition Json?
  courseNamePosition  Json?
  datePosition        Json?
  scorePosition       Json?   // Posición para la calificación

  fontFamilyHeadline  String? @default("Space Grotesk")
  fontFamilyBody      String? @default("Inter")
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  courses             Course[]
}


// -----------------
// ---   FORMS   ---
// -----------------

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      FormStatus @default(DRAFT)
  creatorId   String
  isQuiz      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]     @relation("SharedForms")
  
  @@index([creatorId])
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json?    // Opciones para select, radio, checkbox
  required    Boolean  @default(false)
  placeholder String?
  order       Int
  formId      String
  
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
  
  @@index([formId])
}

model FormResponse {
  id           String   @id @default(cuid())
  formId       String
  userId       String
  submittedAt  DateTime @default(now())
  score        Float?   // Para quizzes
  
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]
  
  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text
  
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@index([responseId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DATE
  NUMBER
}

// --- GAMIFICATION ---

model Achievement {
    id          String   @id @default(cuid())
    slug        AchievementSlug @unique
    name        String
    description String
    points      Int
    icon        String?  // Nombre del ícono de lucide-react

    userUnlocks UserAchievement[]
}

model UserAchievement {
    id            String     @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime   @default(now())

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
    TEN_COURSES_COMPLETED
    TWENTY_COURSES_COMPLETED
    FIRST_NOTE
    FIRST_REACTION
    FIRST_RESOURCE_DOWNLOAD
    FIRST_COURSE_PUBLISHED
    HIGH_PERFORMER // Completar un curso con 95% o más
    LEVEL_5_REACHED
    LEVEL_10_REACHED
    LEVEL_20_REACHED
}

model MotivationalMessage {
    id           String   @id @default(cuid())
    title        String
    content      String?  @db.Text
    imageUrl     String?
    videoUrl     String?
    triggerType  MotivationalMessageTriggerType
    triggerId    String   // Puede ser un courseId o un identificador de nivel (e.g., \'level-5\')
    creatorId    String
    createdAt    DateTime @default(now())

    creator      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    notifications Notification[]
}

enum MotivationalMessageTriggerType {
    COURSE_ENROLLMENT
    COURSE_MID_PROGRESS
    COURSE_NEAR_COMPLETION
    COURSE_COMPLETION
    LEVEL_UP
}


// -------------------
// ---   SETTINGS  ---
// -------------------

model PlatformSettings {
  id                        String    @id @default("cl-nexus-settings-default")
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  resourceCategories        String?
  updatedAt                 DateTime  @updatedAt
  
  // Políticas de Contraseña
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)
  
  // Seguridad Adicional
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  // Apariencia y Tema
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  fontHeadline              String?
  fontBody                  String?
  
  // Apariencia Tema Oscuro
  primaryColorDark          String?
  backgroundColorDark       String?
  
  // Branding
  logoUrl                   String?
  watermarkUrl              String?
  
  // Imágenes de Páginas Públicas
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  announcementsImageUrl     String?
  publicPagesBgUrl          String?
  securityMascotUrl         String?
  
  // URLs para estados vacíos
  emptyStateCoursesUrl      String?
  emptyStateMyCoursesUrl    String?
  emptyStateFormsUrl        String?
  emptyStateMyNotesUrl      String?
  emptyStateResourcesUrl    String?
  emptyStateCertificatesUrl String?
  emptyStateMotivationsUrl  String?
  emptyStateUsersUrl        String?
  emptyStateLeaderboardUrl  String?
}


// --- PROCESSES (Estructura Organizacional) ---

model Process {
  id        String    @id @default(cuid())
  name      String    @unique
  parentId  String?
  
  parent    Process?  @relation("ProcessHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children  Process[] @relation("ProcessHierarchy")
  users     User[]

  @@index([parentId])
}

    