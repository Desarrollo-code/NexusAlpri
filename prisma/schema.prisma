// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===================================
//          MODELOS DE USUARIO
// ===================================
model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  name                String
  password            String
  avatar              String?
  role                UserRole           @default(STUDENT)
  isTwoFactorEnabled  Boolean            @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime           @default(now())
  lastLogin           DateTime?
  isActive            Boolean            @default(true)
  theme               String?
  xp                  Int?               @default(0)
  
  // Relaciones
  courses             Course[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  userNotes           UserNote[]
  achievements        UserAchievement[]
  announcements       Announcement[]
  announcementReads   AnnouncementRead[]
  announcementReactions AnnouncementReaction[]
  createdForms        Form[]
  formResponses       FormResponse[]
  uploadedResources   EnterpriseResource[]
  sharedResources     EnterpriseResource[] @relation("SharedWith")
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  authoredVersions    ResourceVersion[]
  eventParticipations EventParticipation[]
  quizAttempts        QuizAttempt[]

  conversations        Conversation[] @relation("ConversationParticipants")
  messages             Message[]
  gameSessionsHosted   GameSession[]
  gamePlayers          Player[]

  @@map("users")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// ===================================
//      MODELOS DE AUTENTICACIÓN
// ===================================
model SecurityLog {
  id          String    @id @default(cuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       SecurityLogEvent
  ipAddress   String?
  userAgent   String?
  country     String?
  city        String?
  details     String?
  emailAttempt String?
  createdAt   DateTime  @default(now())
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// ===================================
//         MODELOS DE CURSOS
// ===================================
model Course {
  id                  String           @id @default(cuid())
  title               String
  description         String
  imageUrl            String?
  category            String?
  status              CourseStatus     @default(DRAFT)
  instructorId        String
  instructor          User             @relation(fields: [instructorId], references: [id])
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  publicationDate     DateTime?
  isMandatory         Boolean          @default(false)

  // Relaciones
  modules             Module[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  
  prerequisiteId      String?
  prerequisite        Course?          @relation("CoursePrerequisites", fields: [prerequisiteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prerequisiteFor     Course[]         @relation("CoursePrerequisites")

  certificateTemplateId String?
  certificateTemplate CertificateTemplate? @relation(fields: [certificateTemplateId], references: [id], onDelete: SetNull)

  assignments         CourseAssignment[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id             String         @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  userNotes      UserNote[]
  completedBy    LessonCompletionRecord[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  // Relación a un quiz (si el tipo es QUIZ)
  quiz      Quiz?
  
  @@map("content_blocks")
}

model Quiz {
  id             String          @id @default(cuid())
  title          String
  description    String?
  contentBlockId String          @unique
  contentBlock   ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  maxAttempts    Int?
  
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     QuestionType
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  answers  AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  points     Int      @default(0)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]
  
  @@map("answer_options")
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}


// ===================================
//  MODELOS DE PROGRESO E INSCRIPCIÓN
// ===================================
model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseAssignment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignedAt   DateTime @default(now())
  assignedById String

  @@unique([userId, courseId])
  @@map("course_assignments")
}

model CourseProgress {
  id                 String   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime? @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment Enrollment  @relation(fields: [id], references: [id], onDelete: Cascade)
  
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())
  type        String   @default("view") // 'view', 'quiz', 'video'
  score       Float?   // Puntuación obtenida si era un quiz

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score       Float
  submittedAt DateTime @default(now())
  
  answers     AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("answer_attempts")
}

// ===================================
//      MODELOS DE GAMIFICACIÓN
// ===================================
model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String?
  points       Int
  
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
  TEN_COURSES_COMPLETED
  TWENTY_COURSES_COMPLETED
  HIGH_PERFORMER
  FIRST_NOTE
  FIRST_REACTION
  FIRST_RESOURCE_DOWNLOAD
  FIRST_COURSE_PUBLISHED
  LEVEL_5_REACHED
  LEVEL_10_REACHED
  LEVEL_20_REACHED
}

// ===================================
//   MODELOS DE COMUNICACIÓN Y RRHH
// ===================================

model EnterpriseResource {
  id           String      @id @default(cuid())
  title        String
  description  String?
  type         String // FOLDER, DOCUMENT, VIDEO, IMAGE, EXTERNAL_LINK, etc.
  url          String?
  content      String? // Para documentos editables
  observations String? // Notas solo visibles para admins/instructores
  version      Int         @default(1)
  uploadDate   DateTime    @default(now())
  uploaderId   String
  uploader     User        @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  category     String?
  tags         String?     // Comma-separated
  ispublic     Boolean     @default(true)
  pin          String?     // PIN hasheado
  status       ResourceStatus @default(ACTIVE)
  expiresAt    DateTime?
  
  // Para estructura de carpetas
  parentId     String?
  parent       EnterpriseResource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderHierarchy")

  // Para compartir con usuarios específicos
  sharedWith   User[] @relation("SharedWith")

  // Historial de versiones
  versions     ResourceVersion[]

  @@map("enterprise_resources")
}

model ResourceVersion {
  id         String             @id @default(cuid())
  resource   EnterpriseResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  version    Int
  content    String?
  createdAt  DateTime           @default(now())
  authorId   String
  author     User               @relation(fields: [authorId], references: [id])
}

model Announcement {
  id           String   @id @default(cuid())
  title        String
  content      String
  date         DateTime @default(now())
  authorId     String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience     String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT
  priority     String   @default("Normal")
  isPinned     Boolean  @default(false)
  
  attachments  AnnouncementAttachment[]
  reads        AnnouncementRead[]
  reactions    AnnouncementReaction[]
  notifications Notification[]
}

model AnnouncementAttachment {
  id              String       @id @default(cuid())
  name            String
  url             String
  type            String
  size            Int
  announcementId  String
  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  readAt         DateTime     @default(now())
  
  @@unique([userId, announcementId])
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  reaction       String       // Emoji
  
  @@unique([userId, announcementId])
}

model Notification {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  link            String?
  read            Boolean       @default(false)
  createdAt       DateTime      @default(now())
  announcementId  String?       @unique
  announcement    Announcement? @relation(fields: [announcementId], references: [id])
  
  // Para mensajes de motivación
  isMotivational         Boolean  @default(false)
  motivationalMessageId  String?
  motivationalMessage    MotivationalMessage? @relation(fields: [motivationalMessageId], references: [id], onDelete: Cascade)
  
  // Para eventos interactivos
  interactiveEventId             String?
  interactiveEventOccurrence     DateTime?
}

// --- CALENDARIO ---
model CalendarEvent {
  id                 String           @id @default(cuid())
  title              String
  description        String?
  start              DateTime
  end                DateTime
  allDay             Boolean          @default(false)
  location           String?
  audienceType       String           // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  creatorId          String
  creator            User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  color              String?
  videoConferenceLink String?
  isInteractive      Boolean          @default(false)

  // Recurrencia
  recurrence         RecurrenceType   @default(NONE)
  recurrenceEndDate  DateTime?
  
  // Relaciones
  attendees          User[] @relation("EventAttendees")
  attachments        Json[] @default("[]")
  participations     EventParticipation[]

  @@map("calendar_events")
}

model EventParticipation {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId        String
  event          CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  occurrenceDate DateTime // La fecha específica de la ocurrencia en la que se participó
  
  @@unique([userId, eventId, occurrenceDate])
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

// --- FORMULARIOS Y ENCUESTAS ---
model Form {
  id            String   @id @default(cuid())
  title         String
  description   String?
  status        FormStatus @default(DRAFT)
  isQuiz        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id])

  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[] @relation("FormShares")
}

model FormField {
  id           String   @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean  @default(false)
  options      Json[]
  placeholder  String?
  order        Int
  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  answers      FormAnswer[]
}

model FormResponse {
  id           String   @id @default(cuid())
  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime @default(now())
  score        Float?
  
  answers      FormAnswer[]
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- CONFIGURACIÓN DE LA PLATAFORMA ---
model PlatformSettings {
  id                      String   @id @default("cl-nexus-settings-default")
  platformName            String   @default("NexusAlpri")
  logoUrl                 String?
  watermarkUrl            String?
  landingImageUrl         String?
  authImageUrl            String?
  aboutImageUrl           String?
  benefitsImageUrl        String?
  announcementsImageUrl   String?
  publicPagesBgUrl        String?
  
  // Colores
  primaryColor            String?
  secondaryColor          String?
  accentColor             String?
  backgroundColorLight    String?
  primaryColorDark        String?
  backgroundColorDark     String?

  // Fuentes
  fontHeadline            String?
  fontBody                String?

  // Políticas
  allowPublicRegistration Boolean  @default(true)
  emailWhitelist          String?
  enableEmailNotifications Boolean @default(true)
  passwordMinLength       Int      @default(8)
  passwordRequireUppercase Boolean  @default(true)
  passwordRequireLowercase Boolean  @default(true)
  passwordRequireNumber   Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  require2faForAdmins     Boolean  @default(false)
  enableIdleTimeout       Boolean  @default(true)
  idleTimeoutMinutes      Int      @default(20)

  // Contenido
  resourceCategories      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- CERTIFICADOS ---
model CertificateTemplate {
  id                String  @id @default(cuid())
  name              String  @unique
  backgroundImageUrl String
  textColor         String? @default("#000000")
  fontFamilyHeadline String? @default("Space Grotesk")
  fontFamilyBody    String? @default("Inter")
  
  studentNamePosition Json?
  courseNamePosition  Json?
  datePosition        Json?
  scorePosition       Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  courses Course[]
}

// --- MENSAJES DE MOTIVACIÓN ---
model MotivationalMessage {
  id         String   @id @default(cuid())
  title      String
  content    String?
  imageUrl   String?
  videoUrl   String?
  
  triggerType MotivationalMessageTriggerType
  triggerId   String
  
  creatorId   String
  createdAt   DateTime @default(now())
  
  notifications Notification[]
  
  @@unique([triggerType, triggerId])
}

enum MotivationalMessageTriggerType {
  COURSE_ENROLLMENT
  COURSE_MID_PROGRESS
  COURSE_NEAR_COMPLETION
  COURSE_COMPLETION
  LEVEL_UP
}

// --- QUIZZ-IT (Gamified Quizzes) ---
model GameSession {
  id           String    @id @default(cuid())
  pin          String    @unique
  formId       String
  form         Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  hostId       String
  host         User      @relation(fields: [hostId], references: [id])
  status       String    @default("LOBBY") // LOBBY, IN_PROGRESS, FINISHED
  createdAt    DateTime  @default(now())
  
  players      Player[]
}

model Player {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  gameSessionId String
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id])
  nickname      String
  score         Int      @default(0)
  joinedAt      DateTime @default(now())

  responses     PlayerResponse[]
  
  @@unique([userId, gameSessionId])
}

model PlayerResponse {
  id             String   @id @default(cuid())
  playerId       String
  player         Player   @relation(fields: [playerId], references: [id])
  questionId     String
  optionId       String
  isCorrect      Boolean
  scoreAwarded   Int
  responseTimeMs Int
  createdAt      DateTime @default(now())
}

// --- CHAT / MESSAGING ---
model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isGroup      Boolean   @default(false)
  groupName    String?
  groupAvatar  String?

  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
}

model Message {
  id             String   @id @default(cuid())
  content        String?
  createdAt      DateTime @default(now())
  
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  attachments    ChatAttachment[]
}

model ChatAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}
