// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Usado para migraciones, no para el pooler de Supabase
}

generator client {
  provider = "prisma-client-js"
}

// ====================================================
//                ENUMS
// ====================================================

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum NotificationType {
  NEW_ANNOUNCEMENT
  COURSE_UPDATE
  NEW_ENROLLMENT
  COURSE_COMPLETED
  ACHIEVEMENT_UNLOCKED
  SYSTEM
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum ResourceStatus {
  ACTIVE
  ARCHIVED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// ====================================================
//                CORE MODELS
// ====================================================

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isActive              Boolean   @default(true)
  registeredDate        DateTime? @default(now())
  theme                 String?
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  xp                    Int?      @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  coursesAsInstructor  Course[]                @relation("InstructorCourses")
  enrollments          Enrollment[]
  progress             CourseProgress[]
  announcements        Announcement[]
  notifications        Notification[]
  resourcesUploaded    EnterpriseResource[]
  notes                UserNote[]
  securityLogs         SecurityLog[]
  createdTemplates     LessonTemplate[]
  createdEvents        CalendarEvent[]         @relation("EventCreator")
  attendedEvents       CalendarEvent[]         @relation("EventAttendees")
  reactions            AnnouncementReaction[]
  reads                AnnouncementRead[]
  createdForms         Form[]                  @relation("FormCreator")
  formResponses        FormResponse[]
  sharedForms          Form[]                  @relation("FormSharedWith")
  achievements         UserAchievement[]
  quizAttempts         QuizAttempt[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  instructor   User     @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId String

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lessons Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]
  userNotes          UserNote[]
  template           LessonTemplate?
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  quiz Quiz?
}


// ====================================================
//                ENROLLMENT & PROGRESS
// ====================================================

model Enrollment {
  id          String   @id @default(cuid())
  enrolledAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String   @id @default(cuid())
  progressPercentage Float    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime? @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId String     @unique

  completedLessons LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  completedAt DateTime @default(now())
  type        String   @default("view") // 'view', 'quiz', 'video'
  score       Float?   // Puntuaci√≥n si el tipo es 'quiz'

  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String

  @@unique([progressId, lessonId])
}


// ====================================================
//                QUIZZES & FORMS
// ====================================================

model Quiz {
  id            String   @id @default(cuid())
  title         String
  description   String?
  maxAttempts   Int?     // null para intentos ilimitados
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String       @unique

  questions Question[]
  attempts    QuizAttempt[]
}

model Question {
  id        String       @id @default(cuid())
  text      String
  type      QuestionType @default(SINGLE_CHOICE)
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  quiz   Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String

  options         AnswerOption[]
  attemptedAnswers AnswerAttempt[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  points     Int      @default(0)
  feedback   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id            String   @id @default(cuid())
  submittedAt   DateTime @default(now())
  score         Float
  attemptNumber Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String

  answers AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())

  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String
}


// ====================================================
//                COMMUNICATION
// ====================================================

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  date        DateTime @default(now())
  priority    String   @default("Normal") // Normal, Urgente
  audience    String   @default("ALL")
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  attachments  AnnouncementAttachment[]
  reads          AnnouncementRead[]
  reactions      AnnouncementReaction[]
  notifications  Notification[]
}

model AnnouncementAttachment {
  id             String       @id @default(cuid())
  name           String
  url            String
  type           String
  size           Int
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  readAt         DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String

  @@unique([userId, announcementId])
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  reaction       String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String

  @@unique([userId, announcementId])
}


model Notification {
  id          String           @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean          @default(false)
  type        NotificationType @default(SYSTEM)
  createdAt   DateTime         @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: SetNull)
  announcementId String?
}


// ====================================================
//                RESOURCES & NOTES
// ====================================================

model EnterpriseResource {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  uploadDate  DateTime       @default(now())
  category    String?
  ispublic    Boolean        @default(true)
  pin         String?
  tags        String?
  status      ResourceStatus @default(ACTIVE)
  expiresAt   DateTime?
  
  uploader   User   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId String

  parent   EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children EnterpriseResource[] @relation("FolderHierarchy")

  sharedWith User[] @relation("SharedResources")
}

model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
}


// ====================================================
//                SYSTEM & GAMIFICATION
// ====================================================

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated list of allowed domains
  resourceCategories        String?   // Comma-separated list of categories
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  emailAttempt String?
  createdAt    DateTime         @default(now())
  country      String?
  city         String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?
}

model Achievement {
  id           String    @id @default(cuid())
  slug         AchievementSlug @unique
  name         String
  description  String
  icon         String
  points       Int
  createdAt    DateTime @default(now())
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id             String    @id @default(cuid())
  unlockedAt     DateTime  @default(now())
  
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  achievement    Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId  String
  
  @@unique([userId, achievementId])
}


// ====================================================
//                CALENDAR & EVENTS
// ====================================================
model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?
  location            String?
  videoConferenceLink String?
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  color               String           @default("blue")
  audienceType        String           @default("ALL") // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  attachments         Json?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  creator             User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String
  attendees           User[]           @relation("EventAttendees")
}


// ====================================================
//                TEMPLATES
// ====================================================

model LessonTemplate {
  id           String       @id @default(cuid())
  name         String
  description  String?
  type         TemplateType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId      String?
  templateBlocks TemplateBlock[]
  Lesson         Lesson?          @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  lessonId       String?          @unique
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
}

// ====================================================
//                FORMULARIO DINAMICO
// ====================================================

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator     User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String

  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]    @relation("FormSharedWith")
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean  @default(false)
  placeholder String?
  options     Json? // Para 'SINGLE_CHOICE' o 'MULTIPLE_CHOICE'
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  
  answers     FormResponseAnswer[]
}

model FormResponse {
  id           String   @id @default(cuid())
  submittedAt  DateTime @default(now())
  score        Float?   // Para quizzes
  
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  
  answers      FormResponseAnswer[]
}

model FormResponseAnswer {
  id        String   @id @default(cuid())
  value     String   @db.Text
  
  response  FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  field     FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   String
}
