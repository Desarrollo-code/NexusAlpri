// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  password                String
  avatar                  String?
  role                    UserRole               @default(STUDENT)
  isActive                Boolean                @default(true)
  registeredDate          DateTime               @default(now())
  lastLogin               DateTime?
  theme                   String?
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorSecret         String?
  xp                      Int?                   @default(0)
  courses                 Course[]
  enrollments             Enrollment[]
  courseProgress          CourseProgress[]
  achievements            UserAchievement[]
  announcements           Announcement[]
  announcementReads       AnnouncementRead[]
  announcementReactions   AnnouncementReaction[]
  notifications           Notification[]
  notes                   UserNote[]
  resourceUploads         EnterpriseResource[]
  resourceVersions        ResourceVersion[]      @relation("VersionAuthor")
  createdEvents           CalendarEvent[]
  attendedEvents          CalendarEvent[]        @relation("EventAttendees")
  forms                   Form[]
  formResponses           FormResponse[]
  motivationalMessages    MotivationalMessage[]
  eventParticipations     EventParticipation[]
  gameSessionsAsHost      GameSession[]
  players                 Player[]
  playerResponses         PlayerResponse[]
  courseAssignments       CourseAssignment[]
  process                 Process?               @relation(fields: [processId], references: [id])
  processId               String?

  @@map("users")
}

model Course {
  id                    String                 @id @default(cuid())
  title                 String
  description           String
  imageUrl              String?
  category              String?
  instructorId          String
  instructor            User                   @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  status                CourseStatus           @default(DRAFT)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  publicationDate       DateTime?
  modules               Module[]
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  isMandatory           Boolean                @default(false)
  prerequisiteId        String?
  prerequisite          Course?                @relation("CoursePrerequisites", fields: [prerequisiteId], references: [id], onDelete: SetNull)
  prerequisiteFor       Course[]               @relation("CoursePrerequisites")
  certificateTemplateId String?
  certificateTemplate   CertificateTemplate?   @relation(fields: [certificateTemplateId], references: [id], onDelete: SetNull)
  assignedToUsers       CourseAssignment[]

  @@map("courses")
}

model CourseAssignment {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt  DateTime @default(now())
  assignedById String

  @@unique([courseId, userId])
  @@map("course_assignments")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]
  templates     LessonTemplate[] @relation("LessonToTemplate")

  @@map("lessons")
}

model ContentBlock {
  id               String       @id @default(cuid())
  type             LessonType
  content          String?
  order            Int
  lessonId         String
  lesson           Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz             Quiz?
  templateBlocks   TemplateBlock[]

  @@map("content_blocks")
}

model Quiz {
  id               String       @id @default(cuid())
  title            String
  description      String?
  maxAttempts      Int?
  contentBlockId   String       @unique
  contentBlock     ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions        Question[]
  attempts         QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(SINGLE_CHOICE)
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String         @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int            @default(0)
  questionId  String
  question    Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]

  @@map("answer_options")
}

model QuizAttempt {
  id           String          @id @default(cuid())
  userId       String
  quizId       String
  quiz         Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score        Float
  attemptNumber Int
  submittedAt  DateTime        @default(now())
  answers      AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id             String       @id @default(cuid())
  attemptId      String
  attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId     String
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("answer_attempts")
}

model Enrollment {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime       @default(now())
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                   String                   @id @default(cuid())
  userId               String
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId             String
  course               Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId         String                   @unique
  enrollment           Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage   Float?                   @default(0)
  completedAt          DateTime?
  lastActivity         DateTime?                @default(now())
  completedLessons     LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt  DateTime       @default(now())
  type         String         @default("view") // 'view', 'quiz', 'video'
  score        Float?

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lessonId])
    @@map("user_notes")
}

model EnterpriseResource {
  id           String      @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  url          String?
  content      String?
  category     String?
  tags         String?
  uploaderId   String
  uploader     User        @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploadDate   DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  version      Int         @default(1)
  ispublic     Boolean     @default(true)
  pin          String?
  status       ResourceStatus @default(ACTIVE)
  expiresAt    DateTime?
  
  // Relación de auto-referencia para carpetas
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children     EnterpriseResource[] @relation("FolderHierarchy")

  // Relación muchos-a-muchos para compartir
  sharedWith   User[] @relation("SharedResources")

  versions     ResourceVersion[]

  @@map("enterprise_resources")
}

model ResourceVersion {
  id            String              @id @default(cuid())
  resourceId    String
  resource      EnterpriseResource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  version       Int
  content       String?
  authorId      String
  author        User                @relation("VersionAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt     DateTime            @default(now())

  @@map("resource_versions")
}


model Announcement {
  id          String                 @id @default(cuid())
  title       String
  content     String
  date        DateTime               @default(now())
  authorId    String
  author      User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience    String                 @default("ALL")
  priority    String                 @default("Normal")
  isPinned    Boolean                @default(false)
  attachments AnnouncementAttachment[]
  reads       AnnouncementRead[]
  reactions   AnnouncementReaction[]
  notifications Notification[]

  @@map("announcements")
}

model AnnouncementAttachment {
    id              String      @id @default(cuid())
    name            String
    url             String
    type            String
    size            Int
    announcementId  String
    announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

    @@map("announcement_attachments")
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  readAt         DateTime     @default(now())

  @@unique([userId, announcementId])
  @@map("announcement_reads")
}

model AnnouncementReaction {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId  String
  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  reaction        String
  reactedAt       DateTime     @default(now())

  @@unique([userId, announcementId])
  @@map("announcement_reactions")
}

model Notification {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String
  description  String?
  createdAt    DateTime     @default(now())
  read         Boolean      @default(false)
  link         String?
  announcementId String?
  announcement Announcement? @relation(fields: [announcementId], references: [id], onDelete: SetNull)

  isMotivational      Boolean      @default(false)
  motivationalMessageId String?
  motivationalMessage MotivationalMessage? @relation(fields: [motivationalMessageId], references: [id], onDelete: SetNull)

  interactiveEventId          String?
  interactiveEvent            CalendarEvent? @relation(fields: [interactiveEventId], references: [id], onDelete: SetNull)
  interactiveEventOccurrence DateTime?
  
  @@map("notifications")
}

model CalendarEvent {
  id               String      @id @default(cuid())
  title            String
  description      String?
  location         String?
  start            DateTime
  end              DateTime
  allDay           Boolean
  audienceType     String
  color            String      @default("blue")
  creatorId        String
  creator          User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees        User[]      @relation("EventAttendees")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  videoConferenceLink String?
  attachments      Json?
  
  recurrence        RecurrenceType @default(NONE)
  recurrenceEndDate DateTime?

  isInteractive         Boolean           @default(false)
  participations        EventParticipation[]
  interactiveNotifications Notification[]

  @@map("calendar_events")
}

model EventParticipation {
  id              String @id @default(cuid())
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId         String
  event           CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  occurrenceDate  DateTime
  confirmedAt     DateTime @default(now())

  @@unique([userId, eventId, occurrenceDate])
  @@map("event_participations")
}

model SecurityLog {
  id            String    @id @default(cuid())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  event         String
  ipAddress     String?
  userAgent     String?
  country       String?
  city          String?
  details       String?
  emailAttempt  String?
  createdAt     DateTime  @default(now())

  @@map("security_logs")
}

model PlatformSettings {
    id                       String @id @default("cl-nexus-settings-default")
    platformName             String
    allowPublicRegistration  Boolean
    enableEmailNotifications Boolean
    emailWhitelist           String?
    resourceCategories       String @default("")
    passwordMinLength        Int @default(8)
    passwordRequireUppercase Boolean @default(true)
    passwordRequireLowercase Boolean @default(true)
    passwordRequireNumber    Boolean @default(true)
    passwordRequireSpecialChar Boolean @default(false)
    enableIdleTimeout        Boolean @default(true)
    idleTimeoutMinutes       Int @default(20)
    require2faForAdmins      Boolean @default(false)
    primaryColor             String @default("#6366f1")
    secondaryColor           String @default("#a5b4fc")
    accentColor              String @default("#ec4899")
    backgroundColorLight     String @default("#f8fafc")
    primaryColorDark         String @default("#a5b4fc")
    backgroundColorDark      String @default("#020617")
    fontHeadline             String @default("Space Grotesk")
    fontBody                 String @default("Inter")
    logoUrl                  String?
    watermarkUrl             String?
    landingImageUrl          String?
    authImageUrl             String?
    aboutImageUrl            String?
    benefitsImageUrl         String?
    announcementsImageUrl    String?
    publicPagesBgUrl         String?
    updatedAt                DateTime @updatedAt
    
    @@map("platform_settings")
}

model LessonTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  type            TemplateType   @default(USER)
  creatorId       String?
  creator         User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]       @relation("LessonToTemplate")

  @@map("lesson_templates")
}

model TemplateBlock {
  id          String         @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  contentBlockId String?
  contentBlock   ContentBlock? @relation(fields: [contentBlockId], references: [id], onDelete: SetNull)

  @@map("template_blocks")
}


model Form {
    id          String   @id @default(cuid())
    title       String
    description String?
    creatorId   String
    creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    status      FormStatus @default(DRAFT)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    isQuiz      Boolean  @default(false)
    fields      FormField[]
    responses   FormResponse[]
    sharedWith  User[]   @relation("SharedForms")
    gameSessions GameSession[]

    @@map("forms")
}

model FormField {
    id          String   @id @default(cuid())
    label       String
    type        FormFieldType
    required    Boolean  @default(false)
    placeholder String?
    options     Json? // Para select, radio, checkbox
    order       Int
    formId      String
    form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    responses   FormResponseAnswer[]

    @@map("form_fields")
}

model FormResponse {
    id          String   @id @default(cuid())
    formId      String
    form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt DateTime @default(now())
    answers     FormResponseAnswer[]
    score       Float?

    @@map("form_responses")
}

model FormResponseAnswer {
    id         String      @id @default(cuid())
    responseId String
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId    String
    field      FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value      String

    @@map("form_response_answers")
}

model Achievement {
  id             String @id @default(cuid())
  slug           AchievementSlug @unique
  name           String
  description    String
  points         Int
  icon           String?
  users          UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime   @default(now())

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model MotivationalMessage {
    id              String @id @default(cuid())
    title           String
    content         String?
    imageUrl        String?
    videoUrl        String?
    triggerType     MotivationalMessageTriggerType
    triggerId       String // ID del curso o nivel (ej. "level-5")
    creatorId       String
    creator         User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    createdAt       DateTime @default(now())
    notifications   Notification[]
    
    @@map("motivational_messages")
}

model CertificateTemplate {
    id                  String   @id @default(cuid())
    name                String   @unique
    backgroundImageUrl  String
    textColor           String   @default("#000000")
    fontFamilyHeadline  String?
    fontFamilyBody      String?
    studentNamePosition Json?
    courseNamePosition  Json?
    datePosition        Json?
    scorePosition       Json?
    createdAt           DateTime @default(now())
    courses             Course[]

    @@map("certificate_templates")
}

model Conversation {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    isGroup     Boolean   @default(false)
    groupName   String?
    groupImage  String?
    participants User[]
    messages    Message[]

    @@map("conversations")
}

model Message {
    id              String    @id @default(cuid())
    content         String?
    createdAt       DateTime  @default(now())
    conversationId  String
    conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    authorId        String
    author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    attachments     ChatAttachment[]

    @@map("messages")
}

model ChatAttachment {
    id        String   @id @default(cuid())
    name      String
    url       String
    type      String
    size      Int
    messageId String
    message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
    
    @@map("chat_attachments")
}

model GameSession {
  id        String   @id @default(cuid())
  pin       String   @unique
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  hostId    String
  host      User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  status    String   @default("LOBBY") // LOBBY, IN_PROGRESS, FINISHED
  createdAt DateTime @default(now())
  players   Player[]

  @@map("game_sessions")
}

model Player {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameSessionId String
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  nickname      String
  score         Int      @default(0)
  joinedAt      DateTime @default(now())
  responses     PlayerResponse[]

  @@unique([userId, gameSessionId])
  @@map("players")
}

model PlayerResponse {
  id              String   @id @default(cuid())
  playerId        String
  player          Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  questionId      String
  optionId        String?
  isCorrect       Boolean
  scoreAwarded    Int
  responseTimeMs  Int
  submittedAt     DateTime @default(now())

  @@map("player_responses")
}

model Process {
  id              String    @id @default(cuid())
  name            String
  description     String?
  parentId        String?
  parent          Process?  @relation("ProcessHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children        Process[] @relation("ProcessHierarchy")
  users           User[]

  @@map("processes")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
  DOCUMENTO_EDITABLE
}

enum ResourceStatus {
    ACTIVE
    ARCHIVED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
    FIRST_NOTE
    FIRST_REACTION
    FIRST_RESOURCE_DOWNLOAD
    FIRST_COURSE_PUBLISHED
    TEN_COURSES_COMPLETED
    TWENTY_COURSES_COMPLETED
    HIGH_PERFORMER
    LEVEL_5_REACHED
    LEVEL_10_REACHED
    LEVEL_20_REACHED
}

enum RecurrenceType {
    NONE
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

enum MotivationalMessageTriggerType {
  COURSE_ENROLLMENT
  COURSE_MID_PROGRESS
  COURSE_NEAR_COMPLETION
  COURSE_COMPLETION
  LEVEL_UP
}
